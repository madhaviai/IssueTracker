{
  "openapi": "3.0.0",
  "info": {
    "title": "Opsera API",
    "version": "2.0.0",
    "description": "Swagger documentation for Opsera's customer-facing APIs",
    "termsOfService": "https://www.opsera.io/terms-of-service",
    "contact": {
      "name": "Opsera Support",
      "url": "https://www.opsera.io/contact",
      "email": "support@opsera.io"
    }
  },
  "servers": [
    {
      "url": "{serverUrl}",
      "description": "API server",
      "variables": {
        "serverUrl": {
          "default": "https://app.opsera.io",
          "description": "The server URL"
        }
      }
    }
  ],
  "tags": [
    { "name": "Actions", "description": "API endpoints for various actions" },
    {
      "name": "Group Management",
      "description": "API endpoints for group management operations"
    },
    {
      "name": "Logs",
      "description": "API endpoints for log operations.\n\n[Learn more about Audit Logging.](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/audit-logging-api-v2)"
    },
    {
      "name": "Mappings",
      "description": "API endpoints for mapping-related data mapping operations.\n\n[Learn more about Data Mapping.](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#people-project-relationship-mapping-1)"
    },
    {
      "name": "Organizational Hierarchies",
      "description": "API endpoints for organizational hierarchy operations.\n\n[Learn more about Organizational Hierarchy Mapping.](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#organizational-hierarchy-mapping-2)"
    },
    {
      "name": "People",
      "description": "API endpoints for people-related data mapping operations.\n\n[Learn more about People Mapping.](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#people-1)"
    },
    {
      "name": "Pipelines",
      "description": "API endpoints for pipeline actions"
    },
    {
      "name": "Projects",
      "description": "API endpoints for project-related data mapping operations.\n\n[Learn more about Project Mapping.](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#projects)"
    },
    { "name": "Search", "description": "API endpoints for search operations" },
    {
      "name": "Settings",
      "description": "API endpoints for settings operations"
    },
    {
      "name": "Tool Registry",
      "description": "API endpoints for tool registry operations"
    },
    {
      "name": "User Management",
      "description": "API endpoints for user management operations.\n\n[Learn more about User Management API.](https://docs.opsera.io/api-platform-and-integration/user-management-api)"
    }
  ],
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "description": "Error message" },
          "error": {
            "type": "string",
            "description": "Technical error details"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "MethodNotAllowed": {
        "description": "The requested method is not allowed for the endpoint",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Method Not Allowed" }
              }
            }
          }
        }
      }
    }
  },
  "security": [{ "bearerAuth": [] }],
  "paths": {
    "/api/v2/search": {
      "get": {
        "tags": ["Search"],
        "summary": "Search Tasks, Tools, and Pipelines",
        "description": "This endpoint performs a search operation across various entities like tasks, tools, and pipelines based on provided query parameters. It allows users to search by name, description, ID, and other attributes. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/platform-api).\n\n### Use Cases\n- **Resource Discovery**: Quickly find tasks, tools, or pipelines by searching for keywords or IDs.\n- **Filtering**: Narrow down results using specific fields or categories.\n- **Integration**: Use search results to integrate with other systems or automate workflows.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required in the `Authorization` header.\n- **Permissions**: User must have appropriate roles and rights to perform search operations.\n\n***\n\n> ### **Important Notes!**\n> - **Supported Types**: The `t` (type) parameter must be one of `task`, `pipeline`, or `registry`.\n> - **Required Parameters**:\n>   - `s` (search string): The term to search for.\n>   - `t` (type): The entity type to search (`task`, `pipeline`, `registry`).\n> - **Optional Parameters**:\n>   - `regex`: Set to `true` to use regex search; defaults to `false`.\n>   - `count`: Number of records to return; defaults to `100`.\n>   - `field`: Specific field to search within.\n>   - `c` (category): Category to filter results.\n>   - `m` (exact match field): Field for exact match search.\n> - **Data Validation**: All parameters are validated. Missing or invalid parameters will result in an error.\n> - **Rate Limits**: Be aware of any rate limits that may apply to this endpoint.\n",
        "parameters": [
          {
            "in": "query",
            "name": "s",
            "required": true,
            "schema": { "type": "string" },
            "description": "The search string or term.",
            "example": "build"
          },
          {
            "in": "query",
            "name": "t",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["task", "pipeline", "registry"]
            },
            "description": "The type of entity to search.",
            "example": "pipeline"
          },
          {
            "in": "query",
            "name": "regex",
            "schema": { "type": "boolean", "default": false },
            "description": "Set to `true` to perform a regex search.",
            "example": false
          },
          {
            "in": "query",
            "name": "count",
            "schema": { "type": "integer", "default": 100, "minimum": 1 },
            "description": "The number of records to return.",
            "example": 50
          },
          {
            "in": "query",
            "name": "field",
            "schema": { "type": "string" },
            "description": "Specific field to search within.",
            "example": "name"
          },
          {
            "in": "query",
            "name": "c",
            "schema": { "type": "string" },
            "description": "Category to filter results.",
            "example": "deployment"
          },
          {
            "in": "query",
            "name": "m",
            "schema": { "type": "string" },
            "description": "Field for exact match search.",
            "example": "id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved search results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalCount": {
                      "type": "integer",
                      "description": "Total number of results found.",
                      "example": 150
                    },
                    "results": {
                      "type": "array",
                      "description": "An array of search result items.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the entity.",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the entity.",
                            "example": "Build Pipeline"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the entity.",
                            "example": "Pipeline for building applications."
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of the entity.",
                            "example": "pipeline"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "The request parameters are invalid or missing."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating an authentication failure.",
                      "example": "Unauthorized access. Authentication token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Invalid or missing data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "example": "Invalid or missing data provided."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while performing the search."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/settings/pipeline/demo": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Demonstrate Pipeline YAML Configuration",
        "description": "This endpoint demonstrates the pipeline YAML configuration functionality. It accepts a YAML document as the request body and processes it accordingly. This is primarily used for testing and demonstration purposes to validate YAML configurations for pipelines.\n\n### Use Cases\n- **YAML Configuration Testing**: Validate and test pipeline configurations provided in YAML format.\n- **Integration Testing**: Use this endpoint to ensure that pipeline YAML configurations are correctly parsed and handled.\n- **Demonstration**: Showcase how pipeline configurations can be submitted via the API.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have appropriate roles and rights to use this endpoint.\n\n***\n\n> ### **Important Notes!**\n> - **YAML Parsing**: The request body must contain a valid YAML document.\n> - **Mandatory Fields**: The `targetPipelines` field is required in the request body.\n> - **Response Data**: The endpoint echoes back the received YAML content for confirmation.\n> - **Error Handling**: Appropriate HTTP status codes are returned in case of errors.\n",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-yaml": {
              "schema": {
                "type": "object",
                "required": ["targetPipelines"],
                "properties": {
                  "targetPipelines": {
                    "type": "array",
                    "description": "An array of pipeline identifiers to be processed.",
                    "items": { "type": "string" },
                    "example": ["pipeline-123", "pipeline-456"]
                  },
                  "otherConfiguration": {
                    "type": "object",
                    "description": "Additional YAML configuration parameters."
                  }
                }
              },
              "examples": {
                "example1": {
                  "summary": "Sample YAML Request",
                  "value": "targetPipelines:\n  - \"pipeline-123\"\n  - \"pipeline-456\"\notherConfiguration:\n  key: \"value\"\n"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "YAML document received and processed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "message": {
                      "type": "string",
                      "example": "A YAML document has been received."
                    },
                    "reqBody": {
                      "type": "object",
                      "description": "The parsed YAML content received in the request."
                    },
                    "reqTokenParsed": {
                      "type": "object",
                      "description": "Parsed token data from the request."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating invalid or missing data.",
                      "example": "The request body is invalid or missing mandatory fields."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating an authentication failure.",
                      "example": "Unauthorized access. Authentication token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Invalid or missing data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating unprocessable data.",
                      "example": "The YAML document is not valid or cannot be processed."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while processing the YAML document."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/settings/pipeline/source": {
      "post": {
        "tags": ["Pipelines"],
        "summary": "Configure Source Repository Settings",
        "description": "This endpoint updates one or more pipelines with new source repository settings. This endpoint allows you to configure repository settings at both the pipeline and step levels for supported steps such as SonarQube, Command-Line, and Jenkins.\n\n### Use Cases\n- **Bulk Configuration**: Apply repository settings to multiple pipelines simultaneously.\n- **Automated Updates**: Automate the update of repository settings across pipelines and tools.\n- **Standardization**: Ensure consistent repository configurations across different pipelines and steps.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have appropriate roles and rights to configure pipeline settings.\n\n***\n\n> ### **Important Notes!**\n> - **Supported Actions**: The `action` field in the request body must be set to `\"update-source\"`.\n> - **Mandatory Fields**:\n>   - `targetPipelines`: An array of pipeline identifiers to be updated.\n>   - `targetTools`: An array of tool identifiers associated with the pipelines.\n>   - `settings`: An object containing the new repository settings.\n> - **Supported Steps**: Applies to steps like SonarQube, Command-Line, and Jenkins.\n> - **Error Handling**: Appropriate HTTP status codes are returned for different error scenarios.\n> - **Asynchronous Processing**: The endpoint may trigger background processes; ensure idempotency in repeated calls.\n",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "targetPipelines",
                  "targetTools",
                  "settings"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "The action to perform; must be `\"update-source\"`.",
                    "example": "update-source"
                  },
                  "targetPipelines": {
                    "type": "array",
                    "description": "An array of pipeline IDs to update.",
                    "items": { "type": "string" },
                    "example": ["pipeline-id-123", "pipeline-id-456"]
                  },
                  "targetTools": {
                    "type": "array",
                    "description": "An array of tool IDs associated with the pipelines.",
                    "items": { "type": "string" },
                    "example": ["tool-id-789", "tool-id-012"]
                  },
                  "settings": {
                    "type": "object",
                    "description": "An object containing the new repository settings.",
                    "properties": {
                      "repositoryUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL of the source repository.",
                        "example": "https://github.com/organization/repo.git"
                      },
                      "branch": {
                        "type": "string",
                        "description": "The branch to be used in the repository.",
                        "example": "main"
                      },
                      "credentialsId": {
                        "type": "string",
                        "description": "Identifier for the credentials to access the repository.",
                        "example": "credentials-id-345"
                      }
                    }
                  }
                }
              },
              "examples": {
                "example1": {
                  "summary": "Sample Request",
                  "value": {
                    "action": "update-source",
                    "targetPipelines": ["pipeline-id-123", "pipeline-id-456"],
                    "targetTools": ["tool-id-789", "tool-id-012"],
                    "settings": {
                      "repositoryUrl": "https://github.com/organization/repo.git",
                      "branch": "main",
                      "credentialsId": "credentials-id-345"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Source repository settings updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message.",
                      "example": "Source repository settings updated successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating invalid or missing data.",
                      "example": "The request body contains invalid or missing fields."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating an authentication failure.",
                      "example": "Unauthorized access. Authentication token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed - Unsupported action.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating an unsupported action.",
                      "example": "The specified action is not allowed for this endpoint."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Required data is missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating missing or unprocessable data.",
                      "example": "The required data fields are missing or cannot be processed."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while updating the repository settings."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/settings/registry/configurations": {
      "post": {
        "tags": ["Tool Registry"],
        "summary": "Configure Registry Settings",
        "description": "This endpoint updates configuration properties in tool registry objects. It allows you to update settings for tools registered in your system, particularly for tools like Jenkins. It enables bulk updates to tool configurations, ensuring consistency and efficiency in managing tool settings across your organization. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/dynamic-settings-and-api#update-tool-configuration-settings). \n\n### Use Cases\n- **Bulk Configuration Updates**: Modify settings for multiple registry entries simultaneously.\n- **Tool Management**: Keep tool configurations up-to-date and consistent across different environments.\n- **Automation**: Automate the process of updating tool settings as part of your CI/CD pipelines.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have appropriate roles and rights to configure registry settings.\n\n***\n\n> ### **Important Notes!**\n> - **Supported Actions**: The `action` field in the request body must be set to `\"update-configurations\"`.\n> - **Supported Tools**: Currently supports tools like Jenkins. The `targetTools` field must include `\"jenkins\"`.\n> - **Mandatory Fields**:\n>   - `targetRegistries`: An array of registry identifiers to update.\n>   - `targetTools`: An array specifying the tools to update (must include `\"jenkins\"`).\n>   - `settings`: An object containing the configuration properties to update.\n> - **Error Handling**: Appropriate HTTP status codes are returned for different error scenarios.\n> - **Asynchronous Processing**: Ensure idempotency in repeated calls as the endpoint may involve background processing.\n",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "targetRegistries",
                  "targetTools",
                  "settings"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "The action to perform; must be `\"update-configurations\"`.",
                    "example": "update-configurations"
                  },
                  "targetRegistries": {
                    "type": "array",
                    "description": "An array of registry IDs to update.",
                    "items": { "type": "string" },
                    "example": ["registry-id-123", "registry-id-456"]
                  },
                  "targetTools": {
                    "type": "array",
                    "description": "An array specifying the tools to update (must include `\"jenkins\"`).",
                    "items": { "type": "string" },
                    "example": ["jenkins"]
                  },
                  "settings": {
                    "type": "object",
                    "description": "An object containing the configuration properties to update.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL for the Jenkins server.",
                        "example": "http://jenkins.example.com"
                      },
                      "credentialsId": {
                        "type": "string",
                        "description": "Identifier for the credentials to access the tool.",
                        "example": "credentials-id-789"
                      },
                      "otherConfig": {
                        "type": "object",
                        "description": "Additional configuration settings."
                      }
                    }
                  }
                }
              },
              "examples": {
                "example1": {
                  "summary": "Sample Request",
                  "value": {
                    "action": "update-configurations",
                    "targetRegistries": ["registry-id-123", "registry-id-456"],
                    "targetTools": ["jenkins"],
                    "settings": {
                      "url": "http://jenkins.example.com",
                      "credentialsId": "credentials-id-789",
                      "otherConfig": { "key": "value" }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registry configurations updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message.",
                      "example": "The update operation has been completed."
                    },
                    "log": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Log messages detailing the operation."
                    },
                    "reqBody": {
                      "type": "object",
                      "description": "Echo of the request body for confirmation."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating invalid or missing data.",
                      "example": "The request body contains invalid or missing fields."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating authentication failure.",
                      "example": "Unauthorized access. Token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed - Unsupported action or tool type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating unsupported action or tool.",
                      "example": "The action or tool specified is not allowed."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Required data is missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating missing or unprocessable data.",
                      "example": "Required data fields are missing or cannot be processed."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating server-side issue.",
                      "example": "An unexpected error occurred while updating configurations."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/settings/tasks": {
      "post": {
        "summary": "Handle Settings Update for Tasks",
        "description": "This endpoint updates settings for one or more tasks. This endpoint is typically used for task-level configuration changes, such as updating repository settings or other task-specific configurations.\n\n### Use Cases\n- **Task Configuration Management**: Modify settings for tasks in bulk, such as updating repositories or tool configurations.\n- **Auditing and Compliance**: Track changes made to task settings for compliance and monitoring purposes.\n- **Automated System Management**: Allow integrations or admin systems to programmatically update task configurations.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have the appropriate roles and rights to update task settings.\n\n***\n\n### Process Details\n- **Request Validation**: \n  - Validates that the request contains a properly formatted body with task IDs and settings.\n  - Ensures the user has necessary permissions to perform the action.\n- **Task Validation**:\n  - Verifies that the provided task IDs are valid and exist.\n  - Ensures the specified settings are applicable to the tasks.\n- **Update Operation**:\n  - Updates the specified settings for the provided task IDs in the database.\n- **Audit Logging**:\n  - Logs the update activity, including which tasks were modified, what changes were made, and the user who performed the operation.\n\n***\n\n> ### **Important Notes!**\n> - **Required Fields**: Both `target` (task IDs) and `settings` are required in the request body.\n> - **Validation**: Ensure that task IDs are valid and settings are correctly formatted to avoid errors.\n",
        "tags": ["Settings"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["target", "settings"],
                "properties": {
                  "target": {
                    "type": "array",
                    "description": "List of task IDs to be updated.",
                    "items": { "type": "string", "format": "objectId" },
                    "example": [
                      "64d7c869b5760b001e46c1a2",
                      "64d7c869b5760b001e46c1a3"
                    ]
                  },
                  "settings": {
                    "type": "object",
                    "description": "Settings to be applied to the tasks. The format depends on the type of tasks being updated.",
                    "example": {
                      "repository": {
                        "url": "https://github.com/example/repo",
                        "branch": "main"
                      },
                      "notifications": { "enabled": true }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task settings updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message for the operation.",
                      "example": "The update operation has been completed."
                    },
                    "log": {
                      "type": "array",
                      "description": "List of log messages for the operation.",
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing input.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message for the invalid request.",
                      "example": "The request is missing required data or contains invalid fields."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message for unauthorized access.",
                      "example": "Unauthorized access. Please provide a valid token."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the server error.",
                      "example": "An unexpected error occurred while processing the task settings update."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/actions/pipeline/delete": {
      "post": {
        "summary": "Delete Pipelines",
        "description": "This endpoint deletes one or more pipelines specified by their unique IDs. This operation is irreversible and will permanently remove the pipelines from the system.\n\n### Use Cases\n- **Pipeline Cleanup**: Remove outdated, unused, or deprecated pipelines.\n- **Project Decommissioning**: Delete pipelines as part of the retirement of projects or systems.\n- **Compliance**: Ensure data retention policies are adhered to by removing unnecessary pipelines.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have the appropriate roles and rights to delete pipelines.\n\n***\n\n### Process Details\n- **Request Validation**: \n  - Validates that the request contains a properly formatted body with pipeline IDs.\n  - Ensures the user has the necessary permissions to perform the action.\n- **Audit Logging**:\n  - Logs the deletion activity for traceability.\n  - Tracks which pipelines were deleted and by whom.\n- **Deletion**:\n  - Deletes the specified pipelines from the database.\n\n***\n\n> ### **Important Notes!**\n> - **Irreversible Action**: Once pipelines are deleted, they cannot be recovered.\n> - **Required Input**: Ensure that all target pipeline IDs are included in the request body.\n",
        "tags": ["Pipelines"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["targetPipelines"],
                "properties": {
                  "targetPipelines": {
                    "type": "array",
                    "description": "List of pipeline IDs to be deleted.",
                    "items": { "type": "string" },
                    "example": ["pipeline1-id", "pipeline2-id"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pipelines deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message of the deletion.",
                      "example": "The action has been completed."
                    },
                    "log": {
                      "type": "array",
                      "description": "Log messages from the deletion process.",
                      "items": {
                        "type": "string",
                        "example": "Pipeline pipeline1-id deleted."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "Invalid or missing data provided."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access - Invalid or missing token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating unauthorized access.",
                      "example": "Unauthorized access. Please check your token."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the server error.",
                      "example": "An unexpected error occurred while deleting pipelines."
                    },
                    "log": {
                      "type": "array",
                      "description": "Additional log information for debugging.",
                      "items": {
                        "type": "string",
                        "example": "Error deleting pipeline pipeline1-id: Pipeline not found."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/actions/pipeline/run": {
      "post": {
        "summary": "Run Pipelines",
        "description": "This endpoint executes one or more pipelines specified by their unique IDs, using the provided settings. This endpoint enables triggering automated workflows for CI/CD or other pipeline-related tasks.\n\n### Use Cases\n- **CI/CD Automation**: Automate the execution of pipelines for building, testing, and deploying applications.\n- **Orchestration**: Coordinate multiple pipelines to support complex workflows or interdependent operations.\n- **Manual Triggering**: Provide users with the ability to manually trigger pipelines as needed.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have the necessary roles to run pipelines.\n\n***\n\n### Process Details\n- **Input Validation**:\n  - Ensures that a valid list of pipeline IDs and settings object is provided in the request body.\n- **Pipeline Execution**:\n  - Initiates the execution of the specified pipelines using the provided settings.\n- **Response Generation**:\n  - Returns the status and details of the pipeline execution process.\n\n***\n\n> ### **Important Notes!**\n> - Ensure that pipeline IDs in the request body are valid and belong to the authorized user.\n> - This action may trigger resource-intensive workflows. Monitor system usage accordingly.\n",
        "tags": ["Pipelines"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["targetPipelines", "settings"],
                "properties": {
                  "targetPipelines": {
                    "type": "array",
                    "description": "List of pipeline IDs to be executed.",
                    "items": { "type": "string" },
                    "example": ["pipeline1-id", "pipeline2-id"]
                  },
                  "settings": {
                    "type": "object",
                    "description": "Configuration settings for the pipeline execution.",
                    "properties": {
                      "skipTests": {
                        "type": "boolean",
                        "description": "Indicates whether tests should be skipped during the execution.",
                        "example": false
                      },
                      "environment": {
                        "type": "string",
                        "description": "Specifies the deployment environment for the pipeline execution.",
                        "example": "staging"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully executed the pipelines.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the pipeline execution.",
                      "example": "success"
                    },
                    "log": {
                      "type": "array",
                      "description": "Log of activities performed during pipeline execution.",
                      "items": { "type": "string" },
                      "example": [
                        "Pipeline started successfully.",
                        "Deployment completed."
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input: 'targetPipelines' is required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Authorization required. Bearer token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "example": "An error occurred while executing pipelines."
                    },
                    "log": {
                      "type": "array",
                      "description": "Log of activities before the error occurred.",
                      "items": { "type": "string" },
                      "example": [
                        "Pipeline ID validation started.",
                        "Error connecting to orchestrator."
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/actions": {
      "post": {
        "summary": "Handle Action Requests",
        "description": "This endpoint provides a unified interface for performing various actions on pipelines and related resources, such as querying status, creating, updating, running, stopping, or deleting resources. Users can specify the desired action in the request body, and the API dynamically routes the request to the appropriate handler. \nFor detailed examples on how to use this endpoint, see [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/tasks-api/gitcustodian-task-apis#stop-gitcustodian-task-api)\n### Supported Actions\n- **Status**: Check the current status of a resource.\n- **Create**: Create a new resource or configuration.\n- **Update**: Update an existing resource.\n- **Run**: Execute or run a specific resource or process.\n- **Stop**: Stop an ongoing process or execution.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have appropriate roles and permissions to perform the action.\n\n***\n\n### Process Details\n- **Request Validation**: \n  - Validates that the `action` parameter is provided and is supported.\n  - Ensures the request body contains all required parameters for the specified action.\n- **Action Handling**:\n  - Routes the request to the corresponding action handler.\n  - Processes the action based on the provided parameters.\n- **Audit Logging**:\n  - Logs the action performed for traceability and monitoring.\n\n***\n\n> ### **Important Notes!**\n> - **Supported Actions Only**: If the provided action is not in the supported list, the request will return an error.\n> - **Action-Specific Requirements**: Each action has its own specific set of required parameters.\n",
        "tags": ["Actions"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["action"],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "The action to be performed (e.g., status, create, update, run, stop).",
                    "example": "run"
                  },
                  "payload": {
                    "type": "object",
                    "description": "Action-specific parameters required for the chosen action.",
                    "example": {
                      "resourceId": "resource-id-123",
                      "parameters": { "key": "value" }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The action was successfully processed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "description": "A confirmation message for the action.",
                      "example": "Action executed successfully."
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional details about the action result."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or unsupported action request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "Invalid action or missing required parameters."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access - Missing or invalid token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating unauthorized access.",
                      "example": "Unauthorized access. Please check your token."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "An unexpected error occurred."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/logs/audit/user": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get User Activity Audit Logs",
        "description": "This endpoint retrieves detailed activity audit logs related to user actions within the platform. It allows you to fetch a paginated list of audit logs, filtered by various parameters such as date range, user ID, action types, and more. It is useful for monitoring, auditing, and analyzing user activities. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/audit-logging-api-v2).\n### Use Cases\n- **Activity Monitoring**: Track user actions for security and compliance.\n- **Audit Trails**: Maintain logs for auditing purposes.\n- **Issue Investigation**: Investigate specific events or incidents.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n- **Site Roles**:\n  - `Opsera Administrator`\n  - `Auditor`\n  - `Security Manager`\n\n***\n\n> ### **Important Notes!**\n> - **Pagination**: Use `page` and `page_size` query parameters for pagination.\n> - **Date and Time Filtering**: Combine `start_date` with `start_time` and `end_date` with `end_time` for precise filtering.\n> - **Maximum Page Size**: The maximum allowed `page_size` is 1000.\n> - **Data Sensitivity**: Audit logs may contain sensitive information.\n> - **Response Structure**: The response includes a `count` and a `data` array.\n",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1 },
            "description": "Page number for pagination (starting from 1).",
            "example": 1
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            },
            "description": "Number of records per page. Maximum is 1000.",
            "example": 50
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": { "type": "string", "format": "date" },
            "description": "Start date for filtering logs (YYYY-MM-DD).",
            "example": "2023-11-01"
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "pattern": "^([01]?[0-9]|2[0-3]):[0-5][0-9]$"
            },
            "description": "Start time for filtering logs (HH:mm in 24-hour format).",
            "example": "09:00"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": { "type": "string", "format": "date" },
            "description": "End date for filtering logs (YYYY-MM-DD).",
            "example": "2023-11-05"
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "pattern": "^([01]?[0-9]|2[0-3]):[0-5][0-9]$"
            },
            "description": "End time for filtering logs (HH:mm in 24-hour format).",
            "example": "17:00"
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": { "type": "string" },
            "description": "Filter logs for a specific user ID.",
            "example": "507f1f77bcf86cd799439011"
          },
          {
            "in": "query",
            "name": "user_email",
            "schema": { "type": "string", "format": "email" },
            "description": "Filter logs for a specific user email.",
            "example": "jd@opsera.io"
          },
          {
            "in": "query",
            "name": "type",
            "schema": { "type": "string" },
            "description": "Filter logs by type of activity.",
            "example": "login"
          },
          {
            "in": "query",
            "name": "action",
            "schema": { "type": "string" },
            "description": "Filter logs by primary action.",
            "example": "create"
          },
          {
            "in": "query",
            "name": "secondary_action",
            "schema": { "type": "string" },
            "description": "Filter logs by secondary action.",
            "example": "user_profile"
          },
          {
            "in": "query",
            "name": "target_id",
            "schema": { "type": "string" },
            "description": "Filter logs by target entity ID.",
            "example": "60d5ec49f5a4c93d2e7d1b77"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user activity audit logs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Total number of logs matching the query.",
                      "example": 150
                    },
                    "data": {
                      "type": "array",
                      "description": "An array of user activity audit logs.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the audit log entry.",
                            "example": "5f1d7f3e1c4ae51234567890"
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp of the activity.",
                            "example": "2023-11-03T14:22:00.000Z"
                          },
                          "userId": {
                            "type": "string",
                            "description": "ID of the user who performed the action.",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "userEmail": {
                            "type": "string",
                            "format": "email",
                            "description": "Email of the user who performed the action.",
                            "example": "jd@opsera.io"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of activity.",
                            "example": "login"
                          },
                          "action": {
                            "type": "string",
                            "description": "Primary action performed.",
                            "example": "create"
                          },
                          "secondaryAction": {
                            "type": "string",
                            "description": "Secondary action type.",
                            "example": "user_profile"
                          },
                          "targetId": {
                            "type": "string",
                            "description": "ID of the target entity.",
                            "example": "60d5ec49f5a4c93d2e7d1b77"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the activity.",
                            "example": "User created a new profile."
                          },
                          "details": {
                            "type": "object",
                            "description": "Additional details or metadata related to the activity.",
                            "example": {
                              "fieldChanged": "email",
                              "oldValue": "old@example.com",
                              "newValue": "new@example.com"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "example": "Authentication failed. Please provide a valid token."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Invalid or missing data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "example": "Invalid or missing data provided."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/data/project": {
      "post": {
        "tags": ["Projects"],
        "summary": "Create a New Project",
        "description": "This endpoint creates a new record representing a project in the data mapping system. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#create-new-record-for-a-project).\n\n### Use Cases\n- **Project Management**: Add new projects to your organizational hierarchy to ensure accurate mapping.\n- **Data Integration**: Facilitate integrations by maintaining an up-to-date project record system.\n- **Audit and Compliance**: Ensure that projects are properly tracked for auditing and compliance purposes.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n- **Site Roles**:\n  - `Opsera Administrator`\n  - `Administrator`\n  - `Power User`\n\n***\n\n### Request Body Details\nThe request body must include the required attributes for the new project, which are validated before processing.\n\n**Required Fields**: \n- `projectId`: The unique identifier for the project.\n- `projectName`: The name of the project.\n\n**Optional Fields**:\n- `assets`: A project can represent one or more repositories and/or services \n- `externalId`: An external identifier Id for relating this person back to the original data source.\n- `organization`: The organization associated with the project. Represents the highest entity in the hierarchy.\n- `business`: The business unit for the project.\n- `department`: The department responsible for the project.\n- `group`: The group the project belongs to.\n- `team`: The team managing the project. Represents the lowest entity in the hierarchy.\n\n***\n\n> ### **Important Notes!**\n> - **Mandatory Fields**: Ensure `projectId` and `projectName` are included in the request body.\n> - **Optional Fields**: Include `externalId`, `assets`, and other fields if applicable.\n> - **Attributes Object**: Additional project details are encapsulated with the `attributes` object.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["projectId", "projectName"],
                "properties": {
                  "projectId": {
                    "type": "string",
                    "description": "**Required.** The unique identifier for the project.",
                    "example": "proj-123456"
                  },
                  "projectName": {
                    "type": "string",
                    "description": "**Required.** The name of the project.",
                    "example": "New Web Application"
                  },
                  "projectOwner": {
                    "type": "object",
                    "description": "Information about the project owner.",
                    "properties": {
                      "firstName": {
                        "type": "string",
                        "description": "First name of the project owner.",
                        "example": "Jane"
                      },
                      "lastName": {
                        "type": "string",
                        "description": "Last name of the project owner.",
                        "example": "Smith"
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address of the project owner.",
                        "example": "jane.smith@opsera.io"
                      }
                    }
                  },
                  "externalId": {
                    "type": "string",
                    "description": "External identifier for the project.",
                    "example": "abc123-def456-ghi789"
                  },
                  "organization": {
                    "type": "string",
                    "description": "Organization associated with the project.",
                    "example": "Opsera"
                  },
                  "business": {
                    "type": "string",
                    "description": "Business unit associated with the project.",
                    "example": "Engineering"
                  },
                  "department": {
                    "type": "string",
                    "description": "Department responsible for the project.",
                    "example": "Platform"
                  },
                  "group": {
                    "type": "string",
                    "description": "Group the project belongs to.",
                    "example": "Development"
                  },
                  "team": {
                    "type": "string",
                    "description": "Team managing the project.",
                    "example": "Backend Team"
                  },
                  "assets": {
                    "type": "object",
                    "description": "Assets associated with the project.",
                    "properties": {
                      "repositories": {
                        "type": "array",
                        "description": "List of repository assets.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of the repository.",
                              "example": "api-service"
                            },
                            "platform": {
                              "type": "string",
                              "description": "Platform hosting the repository.",
                              "example": "github.com"
                            },
                            "url": {
                              "type": "string",
                              "format": "uri",
                              "description": "URL of the repository.",
                              "example": "https://github.com/Opsera/api-service.git"
                            }
                          }
                        }
                      },
                      "services": {
                        "type": "array",
                        "description": "List of service assets.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of the service.",
                              "example": "authentication-service"
                            },
                            "identifier": {
                              "type": "string",
                              "description": "Identifier for the service.",
                              "example": "auth-svc-01"
                            },
                            "dependencies": {
                              "type": "object",
                              "description": "Dependencies of the service.",
                              "additionalProperties": { "type": "string" }
                            },
                            "externalId": {
                              "type": "string",
                              "description": "External identifier for the service.",
                              "example": "svc-123456"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the created project.",
                      "example": "proj-123456"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Project created successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Invalid or missing data provided."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Access Denied",
                    "Forbidden action due to invalid user account",
                    "Forbidden action due to invalid token."
                  ],
                  "example": "Access Denied"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "An unexpected error occurred while creating the project."
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/data/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "List All Projects",
        "description": "This endpoint retrieves a list of all projects in the data mapping system. Each project record includes key attributes such as the associated organization, business unit, department, group, and team. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#retrieve-all-projects).\n\n### Use Cases\n- **Project Overview**: Obtain a comprehensive list of all projects in your organizational hierarchy.\n- **Data Integration**: Facilitate integrations by accessing up-to-date project records.\n- **Audit and Compliance**: Ensure all projects are accounted for during audits and compliance checks.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n",
        "responses": {
          "200": {
            "description": "Successfully retrieved all projects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Total number of projects retrieved.",
                      "example": 10
                    },
                    "data": {
                      "type": "array",
                      "description": "Array of project records.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the project.",
                            "example": "proj-2322345"
                          },
                          "projectName": {
                            "type": "string",
                            "description": "Name of the project.",
                            "example": "Phase 2"
                          },
                          "projectOwner": {
                            "type": "object",
                            "description": "Information about the project owner.",
                            "properties": {
                              "firstName": {
                                "type": "string",
                                "description": "First name of the project owner.",
                                "example": "John"
                              },
                              "lastName": {
                                "type": "string",
                                "description": "Last name of the project owner.",
                                "example": "Doe"
                              },
                              "email": {
                                "type": "string",
                                "format": "email",
                                "description": "Email address of the project owner.",
                                "example": "user@opsera.io"
                              }
                            }
                          },
                          "externalId": {
                            "type": "string",
                            "description": "External identifier for the project.",
                            "example": "25ce97e1-549b-4f31-bd01-80490847f8a6"
                          },
                          "organization": {
                            "type": "string",
                            "description": "Organization associated with the project.",
                            "example": "Opsera"
                          },
                          "business": {
                            "type": "string",
                            "description": "Business unit associated with the project.",
                            "example": "Engineering"
                          },
                          "department": {
                            "type": "string",
                            "description": "Department responsible for the project.",
                            "example": "Platform"
                          },
                          "group": {
                            "type": "string",
                            "description": "Group the project belongs to.",
                            "example": "Phase 2"
                          },
                          "team": {
                            "type": "string",
                            "description": "Team managing the project.",
                            "example": "AOD"
                          },
                          "assets": {
                            "type": "object",
                            "description": "Assets associated with the project.",
                            "properties": {
                              "repositories": {
                                "type": "array",
                                "description": "List of repository assets.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the repository.",
                                      "example": "web-portal"
                                    },
                                    "platform": {
                                      "type": "string",
                                      "description": "Platform hosting the repository.",
                                      "example": "github.com"
                                    },
                                    "url": {
                                      "type": "string",
                                      "format": "uri",
                                      "description": "URL of the repository.",
                                      "example": "https://github.com/Opsera/web-portal.git"
                                    }
                                  }
                                }
                              },
                              "services": {
                                "type": "array",
                                "description": "List of service assets.",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the service.",
                                      "example": "ha-proxy"
                                    },
                                    "identifier": {
                                      "type": "string",
                                      "description": "Identifier for the service.",
                                      "example": "haprox01"
                                    },
                                    "dependencies": {
                                      "type": "object",
                                      "description": "Dependencies of the service.",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "externalId": {
                                      "type": "string",
                                      "description": "External identifier for the service.",
                                      "example": "b558c4d4-1eba-45e8-92bb-b255df6abd87"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Invalid or missing data provided."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Access Denied",
                    "Forbidden action due to invalid user account",
                    "Forbidden action due to invalid token."
                  ],
                  "example": "Access Denied"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "An unexpected error occurred while retrieving the projects."
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/data/project/{projectId}": {
      "put": {
        "tags": ["Projects"],
        "summary": "Update a Project",
        "description": "This endpoint updates an existing project in the data mapping system using the provided project ID. This endpoint allows users to modify project details such as organization, business unit, department, group, and team associations.\n\n### Use Cases\n- **Project Maintenance**: Keep project information up-to-date with the latest organizational changes.\n- **Data Correction**: Correct any inaccuracies in project records.\n- **Integration Updates**: Sync project changes across integrated systems.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have the appropriate roles and rights to update project records.\n\n***\n\n### Process Details\n- **Request Validation**:\n  - Validates that the `projectId` parameter is provided and valid.\n  - Ensures the request body contains valid and properly formatted data.\n- **Update Operation**:\n  - Updates the project record with the provided information.\n- **Audit Logging**:\n  - Logs the update action for compliance and traceability.\n\n***\n\n> ### **Important Notes!**\n> - Ensure the `projectId` in the path matches the project you intend to update.\n> - All fields are optional; include only the fields you wish to update.\n",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the project to update.",
              "example": "<mapping-id>"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organization": {
                    "type": "string",
                    "description": "Updated organization associated with the project.",
                    "example": "Opsera Inc."
                  },
                  "business": {
                    "type": "string",
                    "description": "Updated business unit for the project.",
                    "example": "Technology"
                  },
                  "department": {
                    "type": "string",
                    "description": "Updated department responsible for the project.",
                    "example": "Engineering"
                  },
                  "group": {
                    "type": "string",
                    "description": "Updated group the project belongs to.",
                    "example": "Development Group"
                  },
                  "team": {
                    "type": "string",
                    "description": "Updated team managing the project.",
                    "example": "Backend Team"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the project.",
                      "example": "<mapping-id>"
                    },
                    "organization": {
                      "type": "string",
                      "description": "Organization associated with the project.",
                      "example": "Opsera Inc."
                    },
                    "business": {
                      "type": "string",
                      "description": "Business unit for the project.",
                      "example": "Technology"
                    },
                    "department": {
                      "type": "string",
                      "description": "Department responsible for the project.",
                      "example": "Engineering"
                    },
                    "group": {
                      "type": "string",
                      "description": "Group the project belongs to.",
                      "example": "Development Group"
                    },
                    "team": {
                      "type": "string",
                      "description": "Team managing the project.",
                      "example": "Backend Team"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when the project was last updated.",
                      "example": "2023-11-05T12:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "The request body sent with the request is invalid or missing."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Authentication failed. Invalid or missing access token."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Access Denied",
                    "Forbidden action due to invalid user account",
                    "Forbidden action due to invalid token."
                  ],
                  "example": "Access Denied"
                }
              }
            }
          },
          "404": {
            "description": "Project not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the project could not be found.",
                      "example": "Project not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while updating the project."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Projects"],
        "summary": "Get a Specific Project",
        "description": "This endpoint retrieves detailed information about a specific project from the data mapping system using its unique identifier. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#people-project-relationship-mapping).\n\n### Use Cases\n- **Project Details**: Retrieve full details of a specific project for use in dashboards or integrations.\n- **Data Validation**: Verify project information as part of a workflow or audit.\n- **System Integration**: Access project details for organizational or hierarchical data integration.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n- **Site Roles**:\n  - `Opsera Administrator`\n  - `Administrator`\n  - `Power User`\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": { "type": "string" },
            "description": "The unique identifier of the project to retrieve.",
            "example": "<project-id>"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the project.",
                      "example": "<project-id>"
                    },
                    "projectName": {
                      "type": "string",
                      "description": "Name of the project.",
                      "example": "Phase 2"
                    },
                    "projectOwner": {
                      "type": "object",
                      "description": "Information about the project owner.",
                      "properties": {
                        "firstName": {
                          "type": "string",
                          "description": "First name of the project owner.",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "Last name of the project owner.",
                          "example": "Doe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "Email address of the project owner.",
                          "example": "user@opsera.io"
                        }
                      }
                    },
                    "externalId": {
                      "type": "string",
                      "description": "External identifier for the project.",
                      "example": "<external-id>"
                    },
                    "organization": {
                      "type": "string",
                      "description": "Organization associated with the project.",
                      "example": "Opsera"
                    },
                    "business": {
                      "type": "string",
                      "description": "Business unit associated with the project.",
                      "example": "Engineering"
                    },
                    "department": {
                      "type": "string",
                      "description": "Department responsible for the project.",
                      "example": "Platform"
                    },
                    "group": {
                      "type": "string",
                      "description": "Group the project belongs to.",
                      "example": "Phase 2"
                    },
                    "team": {
                      "type": "string",
                      "description": "Team managing the project.",
                      "example": "AOD"
                    },
                    "assets": {
                      "type": "object",
                      "description": "Assets associated with the project.",
                      "properties": {
                        "repositories": {
                          "type": "array",
                          "description": "List of repository assets.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the repository.",
                                "example": "web-portal"
                              },
                              "platform": {
                                "type": "string",
                                "description": "Platform hosting the repository.",
                                "example": "github.com"
                              },
                              "url": {
                                "type": "string",
                                "format": "uri",
                                "description": "URL of the repository.",
                                "example": "https://github.com/example/web-portal.git"
                              }
                            }
                          }
                        },
                        "services": {
                          "type": "array",
                          "description": "List of service assets.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the service.",
                                "example": "ha-proxy"
                              },
                              "identifier": {
                                "type": "string",
                                "description": "Identifier for the service.",
                                "example": "haprox01"
                              },
                              "dependencies": {
                                "type": "object",
                                "description": "Dependencies of the service.",
                                "additionalProperties": { "type": "string" }
                              },
                              "externalId": {
                                "type": "string",
                                "description": "External identifier for the service.",
                                "example": "<service-external-id>"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the project could not be found.",
                      "example": "Project not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the server error.",
                      "example": "An unexpected error occurred while retrieving the project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/data/people": {
      "post": {
        "tags": ["People"],
        "summary": "Create a New Person",
        "description": "The People endpoint manages data about the users involved in your projects. Use these functions to create new people records, retrieve all people records, or access specific person details. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#people-1).\n\n### Use Cases\n- **Onboarding**: Add new employees or collaborators to the system during the onboarding process.\n- **Organizational Mapping**: Maintain an accurate mapping of personnel within your organization's structure.\n- **Data Integration**: Synchronize personnel data with other systems that rely on up-to-date information.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have appropriate roles and rights to create people records.\n\n***\n\n### Request Body Details\nThe request body must include the required attributes for the new person. The following fields are expected:\n\n**Required Fields**:\n- `email`: The email address of the person (must be unique).\n- `firstName`: The person's first name.\n- `lastName`: The person's last name.\n\n**Optional Fields**:\n- `organization`: The organization the person is associated with. Represents the highest entities while `team` represents the lowest.\n- `business`: The business unit the person belongs to.\n- `department`: The department the person is part of.\n- `group`: The group the person is associated with.\n- `team`: The team the person works with.\n\n***\n\n> ### **Important Notes!**\n> - **Unique Email**: The `email` field must be unique across all people records.\n> - **Required Fields**: Ensure all mandatory fields are included in the request body.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "firstName", "lastName"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The unique email address of the person.",
                    "example": "jd@opsera.io"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "The first name of the person.",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "The last name of the person.",
                    "example": "Doe"
                  },
                  "organization": {
                    "type": "string",
                    "description": "The organization the person is associated with.",
                    "example": "Opsera."
                  },
                  "business": {
                    "type": "string",
                    "description": "The business unit the person belongs to.",
                    "example": "Engineering"
                  },
                  "department": {
                    "type": "string",
                    "description": "The department the person is part of.",
                    "example": "Platform"
                  },
                  "group": {
                    "type": "string",
                    "description": "The group the person is associated with.",
                    "example": "Phase 2"
                  },
                  "team": {
                    "type": "string",
                    "description": "The team the person works with.",
                    "example": "AOD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Person created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the person.",
                      "example": "25ce97e1-549b-4f31-bd01-80490847f8a6"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "The email address of the person.",
                      "example": "jd@opsera.io"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "The first name of the person.",
                      "example": "John"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "The last name of the person.",
                      "example": "Doe"
                    },
                    "organization": {
                      "type": "string",
                      "description": "The organization the person is associated with.",
                      "example": "Opsera"
                    },
                    "business": {
                      "type": "string",
                      "description": "The business unit the person belongs to.",
                      "example": "Engineering"
                    },
                    "department": {
                      "type": "string",
                      "description": "The department the person is part of.",
                      "example": "Platform"
                    },
                    "group": {
                      "type": "string",
                      "description": "The group the person is associated with.",
                      "example": "Development Group"
                    },
                    "team": {
                      "type": "string",
                      "description": "The team the person works with.",
                      "example": "AOD"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the person was created.",
                      "example": "2023-11-01T12:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "The request body sent with the request is invalid or missing."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating authentication failure.",
                      "example": "Unauthorized access. Authentication token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Duplicate email address.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a duplicate email.",
                      "example": "A person with this email already exists."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while creating the person."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["People"],
        "summary": "List All People",
        "description": "This endpoint retrieves a list of all people in the data mapping system. It returns a comprehensive list of individuals, including their associated attributes and organizational details. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#projects).\n\n### Use Cases\n- **Organizational Overview**: Get a full list of people within the organization for reporting or analysis.\n- **Data Synchronization**: Integrate personnel data with other systems requiring up-to-date information.\n- **Auditing and Compliance**: Verify personnel records for compliance purposes.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have appropriate roles and rights to view people records.\n",
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of people.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Total number of people retrieved.",
                      "example": 25
                    },
                    "data": {
                      "type": "array",
                      "description": "An array of people records.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the person.",
                            "example": "<mapping-id>"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "description": "Email address of the person.",
                            "example": "jd@opsera.io"
                          },
                          "firstName": {
                            "type": "string",
                            "description": "First name of the person.",
                            "example": "John"
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Last name of the person.",
                            "example": "Doe"
                          },
                          "organization": {
                            "type": "string",
                            "description": "Organization the person is associated with.",
                            "example": "Opsera"
                          },
                          "business": {
                            "type": "string",
                            "description": "Business unit the person belongs to.",
                            "example": "Engineering"
                          },
                          "department": {
                            "type": "string",
                            "description": "Department the person is part of.",
                            "example": "Platform"
                          },
                          "group": {
                            "type": "string",
                            "description": "Group the person is associated with.",
                            "example": "Phase 2"
                          },
                          "team": {
                            "type": "string",
                            "description": "Team the person works with.",
                            "example": "AOD"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the person was created.",
                            "example": "2023-11-01T12:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the person was last updated.",
                            "example": "2023-11-05T12:00:00.000Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "Invalid request parameters."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating authentication failure.",
                      "example": "Unauthorized access. Authentication token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while retrieving people."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/data/people/{email}": {
      "put": {
        "tags": ["People"],
        "summary": "Update an Existing Person",
        "description": "This endpoint updates an existing person in the data mapping system using their email address as a unique identifier. It allows you to modify personal details and associated organizational attributes.\n\n### Use Cases\n- **Profile Updates**: Keep individual records up-to-date with changes in personal or organizational information.\n- **Role Changes**: Update a person's department, team, or role within the organization.\n- **Data Correction**: Fix any inaccuracies in a person's record.\n- **Integration Synchronization**: Reflect updates across integrated systems that rely on accurate personnel data.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n- **Site Roles**:\n  - `Opsera Administrator`\n  - `Administrator`\n  - `Power User`\n\n***\n\n> ### **Important Notes!**\n> - **Email Identifier**: The `email` path parameter must correspond to an existing person in the system.\n> - **Partial Updates**: You can include only the fields you wish to update; unspecified fields will remain unchanged.\n> - **Validation**: Ensure that all provided data adheres to the expected formats and constraints.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": { "type": "string", "format": "email" },
            "description": "The unique email address of the person to update.",
            "example": "jd@opsera.io"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "The updated first name of the person.",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "The updated last name of the person.",
                    "example": "Doe"
                  },
                  "organization": {
                    "type": "string",
                    "description": "The updated organization the person is associated with.",
                    "example": "Opsera"
                  },
                  "business": {
                    "type": "string",
                    "description": "The updated business unit the person belongs to.",
                    "example": "Engineering"
                  },
                  "department": {
                    "type": "string",
                    "description": "The updated department the person is part of.",
                    "example": "Platform"
                  },
                  "group": {
                    "type": "string",
                    "description": "The updated group the person is associated with.",
                    "example": "Phase 2"
                  },
                  "team": {
                    "type": "string",
                    "description": "The updated team the person works with.",
                    "example": "AOD"
                  }
                }
              },
              "examples": {
                "example1": {
                  "summary": "Sample Request",
                  "value": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "organization": "Opsera",
                    "business": "Engineering",
                    "department": "Platform",
                    "group": "Phase 2",
                    "team": "AOD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Person updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the person.",
                      "example": "25ce97e1-549b-4f31-bd01-80490847f8a6"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Email address of the person.",
                      "example": "jd@opsera.io"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "First name of the person.",
                      "example": "John"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Last name of the person.",
                      "example": "Doe"
                    },
                    "organization": {
                      "type": "string",
                      "description": "Organization the person is associated with.",
                      "example": "Opsera"
                    },
                    "business": {
                      "type": "string",
                      "description": "Business unit the person belongs to.",
                      "example": "Engineering"
                    },
                    "department": {
                      "type": "string",
                      "description": "Department the person is part of.",
                      "example": "Platform"
                    },
                    "group": {
                      "type": "string",
                      "description": "Group the person is associated with.",
                      "example": "Phase 2"
                    },
                    "team": {
                      "type": "string",
                      "description": "Team the person works with.",
                      "example": "AOD"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the person was last updated.",
                      "example": "2023-11-05T12:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing why the request failed.",
                      "example": "Invalid or missing input data."
                    },
                    "fieldErrors": {
                      "type": "array",
                      "description": "Details of the invalid fields (if applicable).",
                      "items": {
                        "type": "object",
                        "properties": {
                          "field": {
                            "type": "string",
                            "description": "Name of the invalid field.",
                            "example": "email"
                          },
                          "error": {
                            "type": "string",
                            "description": "Specific error message for the field.",
                            "example": "Email format is invalid."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message for authentication failure.",
                      "example": "Unauthorized access."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Person not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the person could not be found.",
                      "example": "Person not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message for server error.",
                      "example": "An unexpected error occurred while updating the person."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["People"],
        "summary": "Get a Specific Person",
        "description": "This endpoint retrieves detailed information about a specific person from the data mapping system using their email address. It allows you to fetch individual details to manage organizational hierarchies, project collaborations, and system integrations. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#projects-1).\n\n### Use Cases\n- **Organizational Mapping**: Fetch individual details to manage and map organizational hierarchies.\n- **Project Collaboration**: Identify and retrieve collaborator details for projects or teams.\n- **System Integration**: Retrieve person-specific information for data synchronization and integrations.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n- **Site Roles**:\n  - `Opsera Administrator`\n  - `Administrator`\n  - `Power User`\n\n***\n\n> ### **Important Notes!**\n> - **Email Format**: The `email` parameter must be a valid email address.\n> - **Case Sensitivity**: Email addresses are case-insensitive.\n> - **Data Sensitivity**: Personal information is sensitive; handle it according to privacy policies and regulations.\n> - **Error Handling**: Appropriate HTTP status codes are returned for different error scenarios.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": { "type": "string", "format": "email" },
            "description": "The email address of the person to retrieve.",
            "example": "jd@opsera.io"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the person.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the person.",
                      "example": "<person-id>"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Email address of the person.",
                      "example": "user@opsera.io"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "First name of the person.",
                      "example": "John"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Last name of the person.",
                      "example": "Doe"
                    },
                    "organization": {
                      "type": "string",
                      "description": "Organization the person is associated with.",
                      "example": "Opsera"
                    },
                    "business": {
                      "type": "string",
                      "description": "Business unit the person belongs to.",
                      "example": "Engineering"
                    },
                    "department": {
                      "type": "string",
                      "description": "Department of the person.",
                      "example": "Platform"
                    },
                    "group": {
                      "type": "string",
                      "description": "Group the person is part of.",
                      "example": "Phase 2"
                    },
                    "team": {
                      "type": "string",
                      "description": "Team the person belongs to.",
                      "example": "AOD"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the person was added to the system.",
                      "example": "2023-11-01T12:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the last update to the person's record.",
                      "example": "2023-11-05T12:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid email format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the invalid email format.",
                      "example": "Invalid email format."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating authentication failure.",
                      "example": "Unauthorized access - insufficient permissions."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Person not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the person was not found.",
                      "example": "Person not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server error.",
                      "example": "An unexpected error occurred while retrieving the person."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/data/mapping": {
      "post": {
        "tags": ["Mappings"],
        "summary": "Create a New Mapping",
        "description": "Creates a new mapping in the data mapping system. This endpoint allows for the creation of mappings between entities such as people, projects, or organizational hierarchies. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#people-project-relationship-mapping-1).\n\n### Use Cases\n- **People to Projects**: Map individuals to specific projects for organizational tracking.\n- **Organizational Hierarchies**: Define relationships between different levels of an organization, such as departments, teams, or groups.\n- **Integration and Synchronization**: Establish mappings for system integrations and data synchronization.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n- **Site Roles**:\n  - `Opsera Administrator`\n  - `Administrator`\n  - `Power User`\n\n***\n\n> ### **Important Notes!**\n> - **Mandatory Fields**: The `parent` and `child` fields are required to establish a mapping.\n> - **Entity Existence**: Ensure that the entities you are mapping (`parent` and `child`) already exist in the system.\n> - **Type Validation**: The `parentType` and `childType` should accurately reflect the types of the entities (e.g., \"department\", \"team\", \"person\").\n> - **Attribute Definition**: The `attributes` object can include additional metadata about the mapping.\n> - **Error Handling**: Appropriate HTTP status codes are returned for different error scenarios.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["parent", "child"],
                "properties": {
                  "parent": {
                    "type": "string",
                    "description": "The unique identifier of the parent entity in the mapping.",
                    "example": "department-id-123"
                  },
                  "parentType": {
                    "type": "string",
                    "description": "The type of the parent entity (e.g., \"department\", \"team\").",
                    "example": "department"
                  },
                  "child": {
                    "type": "string",
                    "description": "The unique identifier of the child entity in the mapping.",
                    "example": "team-id-456"
                  },
                  "childType": {
                    "type": "string",
                    "description": "The type of the child entity (e.g., \"team\", \"person\").",
                    "example": "team"
                  },
                  "attributes": {
                    "type": "object",
                    "description": "Additional attributes for the mapping.",
                    "properties": {
                      "relationship": {
                        "type": "string",
                        "description": "Defines the relationship type for the mapping.",
                        "example": "parent-child"
                      },
                      "mappingType": {
                        "type": "string",
                        "description": "The type of mapping being created.",
                        "example": "org-hierarchy"
                      }
                    }
                  }
                }
              },
              "examples": {
                "example1": {
                  "summary": "Sample Request",
                  "value": {
                    "parent": "department-id-123",
                    "parentType": "department",
                    "child": "team-id-456",
                    "childType": "team",
                    "attributes": {
                      "relationship": "parent-child",
                      "mappingType": "org-hierarchy"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Mapping created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the created mapping.",
                      "example": "<mapping-id>"
                    },
                    "parent": {
                      "type": "string",
                      "description": "The parent entity in the mapping.",
                      "example": "department-id-123"
                    },
                    "parentType": {
                      "type": "string",
                      "description": "The type of the parent entity.",
                      "example": "department"
                    },
                    "child": {
                      "type": "string",
                      "description": "The child entity in the mapping.",
                      "example": "team-id-456"
                    },
                    "childType": {
                      "type": "string",
                      "description": "The type of the child entity.",
                      "example": "team"
                    },
                    "attributes": {
                      "type": "object",
                      "description": "Additional attributes for the mapping.",
                      "properties": {
                        "relationship": {
                          "type": "string",
                          "description": "The relationship type.",
                          "example": "parent-child"
                        },
                        "mappingType": {
                          "type": "string",
                          "description": "The mapping type.",
                          "example": "org-hierarchy"
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the mapping was created.",
                      "example": "2023-11-01T12:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue with the input data.",
                      "example": "The request body sent with the request is invalid or missing."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating an authentication failure.",
                      "example": "Unauthorized access. Authentication token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while creating the mapping."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Mappings"],
        "summary": "List All Mappings",
        "description": "This endpoint retrieves a list of all mappings in the data mapping system. It provides a comprehensive view of all the relationships and associations defined between different entities such as people, projects, and organizational units.\n\n### Use Cases\n- **Relationship Overview**: Obtain a full list of mappings to understand how entities are connected within the system.\n- **Data Integration**: Synchronize mapping data with external systems that rely on these relationships.\n- **Auditing and Compliance**: Review mappings for auditing purposes to ensure data integrity and compliance with organizational policies.\n\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have appropriate roles and rights to view mapping records.\n",
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Total number of mappings retrieved.",
                      "example": 42
                    },
                    "data": {
                      "type": "array",
                      "description": "An array of mapping records.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the mapping.",
                            "example": "<mapping-id>"
                          },
                          "parent": {
                            "type": "string",
                            "description": "The unique identifier of the parent entity in the mapping.",
                            "example": "department-id-123"
                          },
                          "child": {
                            "type": "string",
                            "description": "The unique identifier of the child entity in the mapping.",
                            "example": "team-id-456"
                          },
                          "attributes": {
                            "type": "object",
                            "description": "Additional attributes for the mapping.",
                            "properties": {
                              "parentType": {
                                "type": "string",
                                "description": "The type of the parent entity (e.g., department, team).",
                                "example": "department"
                              },
                              "childType": {
                                "type": "string",
                                "description": "The type of the child entity (e.g., team, person).",
                                "example": "team"
                              },
                              "relationship": {
                                "type": "string",
                                "description": "Defines the relationship type for the mapping.",
                                "example": "parent-child"
                              },
                              "mappingType": {
                                "type": "string",
                                "description": "The type of mapping being retrieved.",
                                "example": "org-hierarchy"
                              }
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the mapping was created.",
                            "example": "2023-11-01T12:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the mapping was last updated.",
                            "example": "2023-11-05T12:00:00.000Z"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "Invalid request parameters."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating authentication failure.",
                      "example": "Unauthorized access. Authentication token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while retrieving mappings."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/data/mapping/{id}": {
      "put": {
        "tags": ["Mappings"],
        "summary": "Update a Mapping",
        "description": "This endpoint updates an existing mapping in the data mapping system using the mapping's unique ID. It allows you to modify the relationships and attributes associated with a specific mapping record.\n\n### Use Cases\n- **Relationship Updates**: Modify existing mappings to reflect changes in organizational structure or project assignments.\n- **Data Correction**: Correct any inaccuracies or outdated information in a mapping record.\n- **Integration Synchronization**: Ensure that changes in mappings are consistently reflected across integrated systems.\n\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **Permissions**: User must have appropriate roles and rights to update mapping records.\n\n***\n\n> ### **Important Notes!**\n> - **ID Format**: The `id` parameter must be a 24-character alphanumeric string matching the pattern `^[a-zA-Z0-9]{24}$`.\n> - **Partial Updates**: Include only the fields you wish to update in the request body; unspecified fields will remain unchanged.\n> - **Validation**: Ensure that the provided data adheres to the expected formats and constraints.\n> - **Concurrency**: Be cautious of concurrent updates; consider implementing versioning or checks to prevent overwriting changes.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9]{24}" },
            "description": "The unique identifier of the mapping to update.",
            "example": "<mapping-id>"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "type": "string",
                    "description": "The updated unique identifier of the parent entity in the mapping.",
                    "example": "updated-department-id-123"
                  },
                  "child": {
                    "type": "string",
                    "description": "The updated unique identifier of the child entity in the mapping.",
                    "example": "updated-team-id-456"
                  },
                  "attributes": {
                    "type": "object",
                    "description": "Additional attributes for the mapping.",
                    "properties": {
                      "parentType": {
                        "type": "string",
                        "description": "The updated type of the parent entity.",
                        "example": "department"
                      },
                      "childType": {
                        "type": "string",
                        "description": "The updated type of the child entity.",
                        "example": "team"
                      },
                      "relationship": {
                        "type": "string",
                        "description": "The updated relationship type for the mapping.",
                        "example": "parent-child"
                      },
                      "mappingType": {
                        "type": "string",
                        "description": "The updated type of mapping.",
                        "example": "org-hierarchy"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mapping updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the updated mapping.",
                      "example": "<mapping-id>"
                    },
                    "parent": {
                      "type": "string",
                      "description": "The parent entity in the mapping.",
                      "example": "updated-department-id-123"
                    },
                    "child": {
                      "type": "string",
                      "description": "The child entity in the mapping.",
                      "example": "updated-team-id-456"
                    },
                    "attributes": {
                      "type": "object",
                      "description": "Additional attributes for the mapping.",
                      "example": {
                        "parentType": "department",
                        "childType": "team",
                        "relationship": "parent-child",
                        "mappingType": "org-hierarchy"
                      }
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the mapping was last updated.",
                      "example": "2023-11-05T12:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "The request body sent with the request is invalid or missing."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating authentication failure.",
                      "example": "Unauthorized access. Please provide a valid bearer token."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Mapping not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating that the mapping could not be found.",
                      "example": "Mapping not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "failed" },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while updating the mapping."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Mappings"],
        "summary": "Get a Mapping",
        "description": "This endpoint retrieves a specific mapping from the data mapping system using the mapping's unique ID. It allows you to fetch detailed information about relationships between entities, such as organizational hierarchies or project associations. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#organizational-hierarchy-mapping-1).\n### Use Cases\n- **Retrieve Relationships**: Fetch specific relationships between entities.\n- **Audit and Validation**: Validate existing mappings for data accuracy or compliance.\n- **System Integrations**: Retrieve mapping details for integration into external systems or workflows.\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n- **Site Roles**:\n  - `Opsera Administrator`\n  - `Administrator`\n  - `Power User`\n***\n\n> ### **Important Notes!**\n> - **Valid ID Format**: The `id` path parameter must be a 24-character hexadecimal string.\n> - **Data Sensitivity**: The mapping data may contain sensitive information. Handle it accordingly.\n> - **Error Handling**: Appropriate HTTP status codes are returned for different error scenarios.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-zA-Z0-9]{24}" },
            "description": "The unique identifier of the mapping. Must be a 24-character alphanumeric string.",
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "200": {
            "description": "Mapping retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the mapping.",
                      "example": "<mapping-id>"
                    },
                    "parent": {
                      "type": "string",
                      "description": "The unique identifier of the parent entity in the mapping.",
                      "example": "department-id-123"
                    },
                    "child": {
                      "type": "string",
                      "description": "The unique identifier of the child entity in the mapping.",
                      "example": "team-id-456"
                    },
                    "attributes": {
                      "type": "object",
                      "description": "Additional attributes for the mapping.",
                      "properties": {
                        "parentType": {
                          "type": "string",
                          "description": "The type of the parent entity.",
                          "example": "department"
                        },
                        "childType": {
                          "type": "string",
                          "description": "The type of the child entity.",
                          "example": "team"
                        },
                        "relationship": {
                          "type": "string",
                          "description": "Defines the relationship type for the mapping.",
                          "example": "parent-child"
                        },
                        "mappingType": {
                          "type": "string",
                          "description": "The type of mapping being retrieved.",
                          "example": "org-hierarchy"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating invalid ID format.",
                      "example": "The ID format is invalid. Expected a 24-character alphanumeric string."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating authentication failure.",
                      "example": "Authentication failed. Bearer token is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access is denied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating access denial.",
                      "example": "Access denied. User does not meet the required permissions."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Mapping not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating mapping not found.",
                      "example": "Mapping not found for the provided ID."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while processing the request."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/data/org-hierarchy": {
      "post": {
        "tags": ["Organizational Hierarchies"],
        "summary": "Create a New Org Hierarchy",
        "description": "This endpoint creates an organizational hierarchy mapping record representing the organizations, businesses, departments, groups, and/or teams hierarchy. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/opsera-api-platform/project-people-organizational-hierarchy-mapping-api#organizational-hierarchy-mapping-2).\n\n### Use Cases\n- **Organizational Structure Definition**: Establish the hierarchy of your organization by defining relationships between entities.\n- **Data Integration**: Synchronize organizational hierarchies with other systems that require up-to-date structural information.\n- **Access Control**: Set up hierarchies that can be used to manage permissions and access rights within your organization.\n***\n\n### Required Access\n- **Authentication**: Bearer token is required.\n- **API Scope**: `api`\n- **Site Roles**:\n  - `Opsera Administrator`\n  - `Administrator`\n  - `Power User`\n***\n\n> ### **Important Notes!**\n> - **Mandatory Fields**: Both `parent` and `child` fields are required to establish the hierarchy.\n> - **Entity Existence**: Ensure that the entities you are linking (`parent` and `child`) already exist in the system.\n> - **Type Validation**: The `parentType` and `childType` fields should accurately reflect the types of the entities (e.g., \"department\", \"team\", \"group\").\n> - **Relationship Definition**: The `relationship` and `mappingType` are set to predefined constants and may not need to be modified.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["parent", "child"],
                "properties": {
                  "parent": {
                    "type": "string",
                    "description": "The unique identifier of the parent entity.",
                    "example": "department-id-123"
                  },
                  "parentType": {
                    "type": "string",
                    "description": "The type of the parent entity.",
                    "example": "department"
                  },
                  "child": {
                    "type": "string",
                    "description": "The unique identifier of the child entity.",
                    "example": "team-id-456"
                  },
                  "childType": {
                    "type": "string",
                    "description": "The type of the child entity.",
                    "example": "team"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Org hierarchy created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the mapping.",
                          "example": "<mapping-id>"
                        },
                        "attribute1": {
                          "type": "string",
                          "description": "The parent entity identifier.",
                          "example": "Opsera"
                        },
                        "attribute2": {
                          "type": "string",
                          "description": "The child entity identifier.",
                          "example": "R&D"
                        },
                        "attributes": {
                          "type": "object",
                          "description": "Additional attributes of the mapping.",
                          "properties": {
                            "parentType": {
                              "type": "string",
                              "description": "The type of the parent entity.",
                              "example": "root"
                            },
                            "childType": {
                              "type": "string",
                              "description": "The type of the child entity.",
                              "example": "Department"
                            }
                          }
                        },
                        "relationship": {
                          "type": "string",
                          "description": "The relationship type.",
                          "example": "org-hierarchy"
                        },
                        "mappingType": {
                          "type": "string",
                          "description": "The mapping type.",
                          "example": "parent-child"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the mapping was created.",
                          "example": "2023-11-01T12:00:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the issue.",
                      "example": "Creating a new org hierarchy requires parent and child."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed or insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating authentication failure.",
                      "example": "Unauthorized access. Please provide a valid bearer token."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access is denied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating insufficient permissions.",
                      "example": "Access denied. User does not have the required roles to create an organizational hierarchy."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the operation.",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side issue.",
                      "example": "An unexpected error occurred while creating the organizational hierarchy."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/usermanagement/group": {
      "post": {
        "summary": "Create a New Group",
        "description": "This endpoint allows customers to create new user groups for organizing and managing access to resources. Groups can represent teams, departments, or any logical grouping of users in your organization. By assigning permissions to groups rather than individual users, you can simplify and streamline access control.\n\n### Use Cases\n- **Team Setup**: Create groups for teams, departments, or project-specific purposes.\n- **Streamlined Access Management**: Use groups to manage access to pipelines, tools, and dashboards.\n- **Simplify Onboarding**: Add users to groups during creation for immediate access to resources.\n- **RBAC Implementation**: Align groups with roles and responsibilities for consistent permission management.\n\n***\n\n### Required Access\n- **API Scope**: `api`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n\n### Process Details\n- **Group Name Validation**:\n   - Ensures the name meets formatting rules (e.g., lowercase, starts with a letter).\n   - Validates uniqueness within the organization.\n- **Optional Member Addition**:\n   - Adds members via user IDs (preferred) or email addresses.\n   - Resolves user details based on identifiers provided.\n   - Rejects invalid or mixed identifiers.\n- **Response Generation**:\n   - Confirms group creation.\n   - Optionally confirms membership updates if members were added.\n\n***\n\n> ### **Important Notes!**\n> - **Group Name Rules**:\n>   - Must be lowercase.\n>   - Maximum length of 25 characters.\n>   - Must begin with a letter.\n>   - Can contain letters, numbers, dashes (-), and underscores (_).\n>   - Must be unique within the organization.\n> - **Identifier Consistency**: Provide either `groupMemberUserIds` **OR** `groupMemberEmailAddresses`, not both.\n> - **Member Details**:\n>   - User IDs are preferred.\n>   - Email addresses are a fallback if user IDs are unavailable.\n> - **Invalid Identifiers**: Any invalid user IDs or email addresses will result in an error.\n> - **Examples**:\n>   | **Valid Group Names**       | **Invalid Group Names**             |\n>   |-----------------------------|-------------------------------------|\n>   | developers-team             | 123group (starts with a number)     |\n>   | qa_testers                  | Dev-Team (contains uppercase)       |\n>   | project123-admins           | my@group (contains special character) |\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["Group Management"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["groupName"],
                "properties": {
                  "groupName": {
                    "type": "string",
                    "description": "Name of the group (must follow group name rules described above).",
                    "example": "developers-team"
                  },
                  "groupMemberUserIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of user IDs to add as group members (preferred method).\nDo not provide this if using `groupMemberEmailAddresses`.\n",
                    "example": [
                      "507f1f77bcf86cd799439011",
                      "507f1f77bcf86cd799439012"
                    ]
                  },
                  "groupMemberEmailAddresses": {
                    "type": "array",
                    "items": { "type": "string", "format": "email" },
                    "description": "List of email addresses of group members to add (alternative method).\nDo not provide this if using `groupMemberUserIds`.\n",
                    "example": [
                      "user.name@company.com",
                      "another.user@company.com"
                    ]
                  }
                }
              },
              "examples": {
                "usingUserIds": {
                  "summary": "Create group with user IDs (preferred)",
                  "value": {
                    "groupName": "developers-team",
                    "groupMemberUserIds": [
                      "507f1f77bcf86cd799439011",
                      "507f1f77bcf86cd799439012"
                    ]
                  }
                },
                "usingEmails": {
                  "summary": "Create group with email addresses",
                  "value": {
                    "groupName": "developers-team",
                    "groupMemberEmailAddresses": [
                      "user.name@company.com",
                      "another.user@company.com"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Group creation complete"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "groupCreateResult": {
                          "type": "string",
                          "example": "Group created successfully"
                        },
                        "groupMembershipUpdateResult": {
                          "type": "string",
                          "example": "Group membership updated successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid input).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message explaining the validation failure."
                    }
                  }
                },
                "examples": {
                  "invalidName": {
                    "value": {
                      "message": "Invalid group name. Group names must contain only lowercase characters."
                    }
                  },
                  "missingName": {
                    "value": { "message": "Group name is required." }
                  },
                  "invalidFormat": {
                    "value": {
                      "message": "Invalid group name. Group name must begin with a letter and can contain letters, numbers, dashes, and underscores."
                    }
                  },
                  "invalidUserIds": {
                    "value": { "message": "Error getting user details." }
                  },
                  "noValidEmails": {
                    "value": {
                      "message": "No valid email addresses found for the provided user IDs."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Group already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Group already exists."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occurred while creating the group."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/usermanagement/group/{groupName}": {
      "get": {
        "summary": "Get a Specific Group",
        "description": "This endpoint retrieves detailed information about a specific group by its name. The response includes critical group's properties such as type, owner, sync status, and member count.\n### Use Cases\n- **Retrieve Group Details for Access Management:**\n  Fetch detailed information about a group to manage user permissions and access control within your application.\n- **Verify Group Existence Before Operations:**\n  Check if a group exists before performing actions like adding or removing members to prevent errors.\n- **Display Group Information in User Interfaces:**\n  Display group details in administrative dashboards or user interfaces for better visibility and management.\n- **Audit and Compliance Checks:**\n  Retrieve group information to ensure configurations comply with organizational policies and standards.\n- **Monitor Group Membership Changes:**\n  Keep track of group properties and membership counts for monitoring or notification purposes.\n\n***\n\n### Required Access\n- **API Scopes**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`, `Security Manager`, `Auditor`\n\n***\n\n### Process Details\n- **Group Validation**: Validates the `groupName` parameter to ensure it adheres to the required rules.\n- **Group Existence Check**: Verifies if the group exists within the organization's domain.\n- **Group Details Retrieval**:\n   * Fetches the group's details if the group is found.\n   * Calculates the `memberCount` by determining the number of members in the group.\n   * Removes sensitive properties (`dn`, `domain`, `members`) from the response to maintain security.\n- **Response Generation**: Returns the sanitized group information, including the `memberCount` and other non-sensitive details.\n\n***\n\n> ### **Important Notes!**\n> - **Case Sensitivity**: The `groupName` is case-sensitive and must match exactly.\n> - **Response Data**: Certain internal properties are omitted from the response for security reasons.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["Group Management"],
        "parameters": [
          {
            "in": "path",
            "name": "groupName",
            "required": true,
            "schema": { "type": "string" },
            "description": "The name of the group to retrieve (case-sensitive, must match exactly). Must meet the group name validation rules.",
            "example": "developers-team"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved group information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the group.",
                      "example": "developers-team"
                    },
                    "groupType": {
                      "type": "string",
                      "description": "Type of the group (usually \"user\").",
                      "example": "user"
                    },
                    "ownerEmail": {
                      "type": "string",
                      "description": "Email address of the group owner.",
                      "example": "user.name@company.com"
                    },
                    "isSync": {
                      "type": "boolean",
                      "description": "Indicates whether the group is synced with external systems.",
                      "example": false
                    },
                    "memberCount": {
                      "type": "integer",
                      "description": "Number of members in the group.",
                      "example": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid group name provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message detailing the validation issue.",
                      "examples": {
                        "groupNameRequired": {
                          "value": "Invalid group name. Group name is required."
                        },
                        "lowercaseOnly": {
                          "value": "Invalid group name. Group names must contain only lowercase characters."
                        },
                        "invalidFormat": {
                          "value": "Invalid group name. Group names must be alphanumeric and may include hyphens and underscores."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the group was not found.",
                      "example": "Group not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "General error message.",
                      "example": "An unexpected error occurred while retrieving the group"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Specific Group",
        "description": "This endpoint permanently deletes a group by its name. This operation is irreversible, and the group cannot be recovered once deleted. Use this endpoint to manage and clean up organizational groups effectively.\n\n### Use Cases\n- **Group Management**: Remove obsolete or unused groups from the system.\n- **Access Control**: Delete groups no longer relevant to streamline organizational roles and permissions.\n- **Compliance**: Ensure group structures align with updated organizational policies.\n\n***\n\n### Required Access\n- **API Scopes**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n\n### Process Details\n- **Group Validation**:\n  - Validates the `groupName` parameter to ensure it follows the required format and rules.\n  - Rejects invalid or missing `groupName` parameters with appropriate error responses.\n- **Group Deletion**:\n  - Deletes the specified group if it exists.\n  - Logs the deletion operation for auditing and troubleshooting purposes.\n- **Response Handling**:\n  - Confirms successful deletion with a confirmation message.\n  - Returns error messages if the group does not exist or if any other issue occurs.\n\n***\n\n> ### **Important Notes!**\n> - **Irreversible Action**: Once deleted, the group cannot be recovered.\n> - **Case Sensitivity**: The `groupName` parameter is case-sensitive and must match the group's exact name.\n> - **Validation**: The `groupName` must adhere to the required naming conventions.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["Group Management"],
        "parameters": [
          {
            "in": "path",
            "name": "groupName",
            "required": true,
            "schema": { "type": "string" },
            "description": "The name of the group to delete (case-sensitive, must match exactly).",
            "example": "developers-team"
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message with deletion status.",
                      "example": "Group deletion completed: true"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid group name or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the reason for the failure.",
                      "example": "Failed to delete group"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the group could not be found.",
                      "example": "Group not found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Missing required parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Did not include the required Request Parameters."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "General error message for troubleshooting.",
                      "example": "An unexpected error occurred while deleting the group"
                    },
                    "error": {
                      "type": "string",
                      "description": "Technical error details if available."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/usermanagement/groups": {
      "get": {
        "summary": "Get All Groups or Filter by Name/ID",
        "description": "This endpoint fetches a comprehensive list of all groups within the organization. Optionally, the results can be filtered using a search term or specific group IDs (names).\nIt supports flexible filtering and is designed to provide relevant group information for administrative and organizational tasks.\n\n### Use Cases\n- **Comprehensive Group Retrieval**: Get a complete list of all groups in your organization.\n- **Filtered Results**: Use search terms or specific group IDs to narrow down results based on your requirements.\n- **Administrative Dashboards**: Populate admin interfaces with group details for management and monitoring.\n- **Auditing and Compliance**: Ensure proper group configuration and compliance with organizational policies.\n\n***\n\n### Required Access\n- **API Scopes**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`, `Security Manager`, `Auditor`\n\n***\n\n### Process Details\n- **Query Parameter Handling**:\n  - `search`: Filters groups based on case-insensitive matches in their names.\n  - `id`: Retrieves groups that match the provided case-insensitive group IDs (names).\n- **Data Sanitization**: Cleans query inputs to ensure valid and safe processing.\n- **Filtering Logic**:\n  - Applies the `id` filter first, if provided.\n  - Applies the `search` filter only if `id` is not provided.\n- **Response Generation**: Returns sanitized group details with additional metadata like `memberCount` for each group.\n\n***\n\n> ### **Important Notes!**\n> - **Filter Priority**: If both `id` and `search` are provided, the `id` parameter takes precedence.\n> - **Sanitization**: Query parameters are sanitized to ensure safe processing and prevent potential security risks.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": [
            "Opsera Administrator",
            "Administrator",
            "Power User",
            "Security Manager",
            "Auditor"
          ]
        },
        "tags": ["Group Management"],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Optional filter to search for groups by name (case-insensitive). Matches any part of the group name.\nNote: This parameter is ignored if the `id` parameter is provided.\n",
            "example": "dev"
          },
          {
            "in": "query",
            "name": "id",
            "schema": { "type": "string" },
            "description": "Comma-separated list of group IDs (names) to retrieve specific groups.\nExample: `id=My Group Name, Other Group Name`\nNote: Group names are case-insensitive for matching.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the group.",
                        "example": "developers-team"
                      },
                      "groupType": {
                        "type": "string",
                        "description": "Type of the group.",
                        "example": "user"
                      },
                      "ownerEmail": {
                        "type": "string",
                        "description": "Email address of the group owner.",
                        "example": "owner@psera.io"
                      },
                      "isSync": {
                        "type": "boolean",
                        "description": "Indicates whether the group is synced with external systems.",
                        "example": false
                      },
                      "memberCount": {
                        "type": "integer",
                        "description": "Number of members in the group.",
                        "example": 5
                      }
                    }
                  }
                },
                "example": [
                  {
                    "name": "developers-team",
                    "groupType": "user",
                    "ownerEmail": "dev-lead@opsera.io",
                    "isSync": false,
                    "memberCount": 5
                  },
                  {
                    "name": "qa-team",
                    "groupType": "user",
                    "ownerEmail": "qa-lead@opsera.io",
                    "isSync": false,
                    "memberCount": 3
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the server issue.",
                      "example": "An unexpected error occurred while retrieving groups."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/usermanagement/group/{groupName}/memberships": {
      "get": {
        "summary": "Get Memberships for a Specific Group",
        "description": "This endpoint fetches a list of all members for a specified group. For each member, this endpoint returns either:\n- The email address (if detailed user data is not available).\n- Complete user details, including personal and organizational attributes, if available.\n\n### Use Cases\n- **Group Management**: Retrieve detailed group membership for administrative tasks like auditing and user management.\n- **Access Control Validation**: Ensure the correct members are part of a group by reviewing the full list of users.\n- **User Directory Integration**: Populate group memberships in user-facing dashboards or other systems.\n\n***\n\n### Required Access\n- **API Scopes**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n\n### Process Details\n- **Group Name Validation**:\n  - Validates the `groupName` parameter to ensure it meets the required format and matches the group name exactly (case-sensitive).\n- **Membership Retrieval**:\n  - Retrieves email addresses of group members.\n  - If detailed user data is available, fetches comprehensive user information for each member.\n- **Response Composition**:\n  - Combines email-only and detailed user objects into a single response.\n\n***\n\n> ### **Important Notes!**\n> - **Case Sensitivity**: The `groupName` parameter is case-sensitive and must match exactly.\n> - **Partial Data**: If user details are not available, only the email address is returned for each member.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["Group Management"],
        "parameters": [
          {
            "in": "path",
            "name": "groupName",
            "required": true,
            "schema": { "type": "string" },
            "description": "The name of the group to get memberships for (case-sensitive).",
            "example": "developers-team"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved group memberships.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of group members, each represented as either a string (email address) or a complete user object.",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "format": "email",
                        "description": "Email address only (when user details are not available).",
                        "example": "user.name@company.com"
                      },
                      {
                        "type": "object",
                        "description": "Complete user details (when available).",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "Opsera User ID. Used as a primary key for user-related operations.",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "applications": {
                            "type": "array",
                            "description": "List of application IDs that the user has access to. Each ID represents a specific application in the system.",
                            "items": { "type": "string" },
                            "example": [
                              "507f1f77bcf86cd799439011",
                              "507f1f77bcf86cd799439012"
                            ]
                          },
                          "tools": {
                            "type": "array",
                            "description": "List of tool IDs that the user has access to. Tools represent different functionalities or integrations available to the user.",
                            "items": { "type": "string" },
                            "example": [
                              "507f1f77bcf86cd799439013",
                              "507f1f77bcf86cd799439014"
                            ]
                          },
                          "firstName": {
                            "type": "string",
                            "description": "User's first name or given name, used for identification and display purposes.",
                            "example": "John"
                          },
                          "lastName": {
                            "type": "string",
                            "description": "User's last name or family name, used for identification and display purposes.",
                            "example": "Doe"
                          },
                          "email": {
                            "type": "string",
                            "description": "User's email address, used for authentication and communication. Must be unique within the system.",
                            "example": "user.name@company.com"
                          },
                          "ssoSystem": {
                            "type": "string",
                            "description": "The Single Sign-On (SSO) system used for user authentication. Indicates how the user authenticates with the system.",
                            "example": "acmeSso"
                          },
                          "organizationName": {
                            "type": "string",
                            "description": "Name of the organization the user belongs to. Used for organizational context and access control.",
                            "example": "Company Name"
                          },
                          "division": {
                            "type": "string",
                            "description": "User's organizational division or department. Helps in categorizing users within the organizational structure.",
                            "example": "Engineering"
                          },
                          "domain": {
                            "type": "string",
                            "description": "The domain associated with the user's organization. Used for authentication and organization-specific features.",
                            "example": "company.com"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp indicating when the user account was created. Stored in ISO 8601 format.",
                            "example": "2023-11-01T12:00:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp indicating when the user account was last modified. Stored in ISO 8601 format.",
                            "example": "2023-11-02T12:00:00.000Z"
                          },
                          "groups": {
                            "type": "array",
                            "description": "List of group IDs that the user belongs to. Groups provide additional access control and organization capabilities.",
                            "items": { "type": "string" },
                            "example": []
                          },
                          "active": {
                            "type": "boolean",
                            "description": "Indicates whether the user account is currently active. Inactive accounts cannot access the system.",
                            "example": true
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message.",
                      "example": "Group name is required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the group was not found.",
                      "example": "Group not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for troubleshooting.",
                      "example": "An unexpected error occurred while retrieving group memberships."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/usermanagement/group/{groupName}/members": {
      "post": {
        "summary": "Replace All Members in a Specific Group",
        "description": "This endpoint replaces all existing members in a specified group with a new list of users provided in the request body. By overwriting current group membership, administrators can ensure that only the appropriate users are part of the group.\n### Use Cases\n- **Update Group Membership**: Replace the members of a group with a new set of users based on changing organizational needs.\n- **Bulk User Management**: Efficiently manage group membership by replacing the entire list of members in a single operation.\n- **Ensure Access Accuracy**: Remove users who no longer need access and add those who require it.\n\n***\n\n### Required Access\n- **API Scope**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n\n### Process Details\n- **Group Validation**: Validates the `groupName` to ensure it meets naming rules.\n- **Member Validation**:\n   - Confirms that the `members` array is provided and properly formatted.\n   - Ensures all identifiers are either valid email addresses or user IDs.\n   - Checks that identifiers are not mixed types (all emails or all user IDs).\n   - Removes duplicate identifiers.\n- **User Verification**:\n   - Validates that each provided identifier corresponds to an existing user in the system.\n   - Flags and skips invalid users or identifiers.\n- **Membership Update**:\n   - Retrieves current group members.\n   - Replaces current members with the provided list.\n   - Removes users not included in the new list and adds new members.\n- **Response Generation**:\n   - Returns a success message with details of the replaced members.\n\n***\n\n> ### **Important Notes!**\n> - **Case Sensitivity**: The `groupName` is case-sensitive and must match exactly.\n> - **Identifier Consistency**: Provide either all email addresses **OR** all user IDs, not a mix of both.\n> - **Valid Formats**: Identifiers must follow these rules:\n>   - **Email Addresses**: Must be in a valid email format.\n>   - **User IDs**: Must follow a valid database ID format.\n> - **Empty Array**: Sending an empty array removes all members from the group.\n> - **Atomic Operation**: If any validation fails, no changes are made to the group.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["Group Management"],
        "parameters": [
          {
            "in": "path",
            "name": "groupName",
            "required": true,
            "schema": { "type": "string" },
            "description": "The name of the group to replace members in (case-sensitive).",
            "example": "developers-team"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "email",
                      "description": "Valid email address."
                    },
                    {
                      "type": "string",
                      "format": "userId",
                      "description": "Valid user ID."
                    }
                  ]
                },
                "description": "List of identifiers (either all email addresses or all user IDs) that will become the new group members.\nSend an empty array to remove all members.\n"
              },
              "examples": {
                "replaceWithEmails": {
                  "value": ["user.one@company.com", "user.two@company.com"],
                  "summary": "Replace with new members using email addresses."
                },
                "replaceWithUserIds": {
                  "value": [
                    "507f1f77bcf86cd799439011",
                    "507f1f77bcf86cd799439012"
                  ],
                  "summary": "Replace with new members using user IDs."
                },
                "removeAllMembers": {
                  "value": [],
                  "summary": "Remove all members."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Members replaced successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message.",
                      "example": "Group membership replacement completed successfully."
                    },
                    "result": {
                      "type": "string",
                      "description": "Detailed result of the operation.",
                      "example": "Members replaced successfully."
                    },
                    "replacedMembers": {
                      "type": "array",
                      "description": "List of identifiers that were successfully added.",
                      "items": { "type": "string" },
                      "example": [
                        "user.one@company.com",
                        "user.two@company.com"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid input).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "invalidItems": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                },
                "examples": {
                  "invalidIdentifiers": {
                    "value": {
                      "message": "Invalid identifiers provided - must be valid email addresses or valid user IDs.",
                      "invalidItems": [
                        "invalid.email",
                        "notAnEmail",
                        "invalidId"
                      ]
                    }
                  },
                  "mixedTypes": {
                    "value": {
                      "message": "Mixed identifier types detected - must use either all email addresses or all user IDs."
                    }
                  },
                  "noMembers": {
                    "value": {
                      "message": "Non-empty array of member identifiers (emails or user IDs) is required."
                    }
                  },
                  "invalidUsers": {
                    "value": {
                      "message": "Some user IDs do not belong to valid users.",
                      "invalidUsers": ["507f1f77bcf86cd799439011"]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for troubleshooting.",
                      "example": "Failed to replace group members."
                    },
                    "error": {
                      "type": "string",
                      "description": "Technical error details if available.",
                      "example": "Database connection failed."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Add Members to a Specific Group",
        "description": "This endpoint allows administrators to add new members to an existing group by specifying their email addresses or user IDs. Unlike replacing group membership entirely, this operation appends new members to the group while keeping the current members intact. Sending an empty array will, however, remove all existing members, making it versatile for reconfiguring group memberships.\n### Use Cases\n- **Manage User Access to Resources**: Assign users to groups to control their access to specific resources or functionalities within Opsera.\n- **Implement Role-Based Access Control (RBAC)**: Group users and manage permissions efficiently by controlling access based on group memberships.\n- **Bulk Update Group Memberships**: Add multiple users to a group in a single request to streamline permission management.\n- **Automate User Onboarding Processes**: Automatically assign new users to appropriate groups during the onboarding process.\n\n***\n\n### Required Access\n- **API Scopes**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n\n### Process Details\n* **Group Validation**: The system validates the `groupName` parameter to ensure it meets the group name validation rules.\n* **Group Existence Check**: Verifies that the specified group exists within the organization.\n* **Member Validation**:\n  - Confirms that the `members` array is provided and properly formatted.\n  - Ensures all identifiers are either valid email addresses or unique database ID strings.\n  - Checks that identifiers are not mixed types (all emails or all user IDs).\n  - Removes duplicate identifiers.\n* **User Existence Verification**: Checks that all provided identifiers correspond to valid users in the system.\n* **Group Membership Update**:\n  - Retrieves the current members of the group.\n  - Removes specified members from the group.\n  - Skips members not found in the group.\n* **Response Generation**: Returns a success message with the list of members that were removed.\n\n***\n\n> ### **Important Notes!**\n> - **Group Name Matching**: The `groupName` must match exactly (case-sensitive) and adhere to the group name validation rules.\n> - **Identifier Types**: You must provide either all email addresses or all user IDs, not a mix of both.\n> - **Valid Users**: All identifiers must belong to valid users in the system.\n> - **Duplicate Handling**: Duplicate identifiers will be automatically removed.\n> - **Existing Members**: Members already in the group will be skipped.\n> - **Identifier Formats**:\n>   - **Email Addresses**: Must be in a valid email format.\n>   - **User IDs**: Must be valid unique database ID format.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["Group Management"],
        "parameters": [
          {
            "in": "path",
            "name": "groupName",
            "required": true,
            "schema": { "type": "string" },
            "description": "The name of the group to add members to (case-sensitive)",
            "example": "developers-team"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "email",
                      "description": "Email address of a user"
                    },
                    {
                      "type": "string",
                      "format": "databaseId",
                      "description": "Unique Opsera User ID"
                    }
                  ]
                },
                "description": "List of identifiers (either all email addresses or all userIds) of members to add",
                "minItems": 1
              },
              "examples": {
                "addWithEmails": {
                  "summary": "Add members using email addresses",
                  "value": ["user.name@company.com", "another.user@company.com"]
                },
                "addWithUserIds": {
                  "summary": "Add members using user IDs",
                  "value": [
                    "507f1f77bcf86cd799439011",
                    "507f1f77bcf86cd799439012"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Members added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Group membership update completed successfully"
                    },
                    "result": {
                      "type": "string",
                      "description": "Detailed result of the operation",
                      "example": "Members added successfully"
                    },
                    "addedMembers": {
                      "type": "array",
                      "description": "List of identifiers that were successfully added",
                      "items": { "type": "string" },
                      "example": [
                        "user.name@company.com",
                        "another.user@company.com"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid input)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "invalidEmails": {
                      "type": "array",
                      "description": "List of invalid identifiers",
                      "items": { "type": "string" }
                    }
                  }
                },
                "examples": {
                  "invalidEmails": {
                    "summary": "Invalid email addresses provided",
                    "value": {
                      "message": "Invalid email addresses provided",
                      "invalidEmails": ["invalid.email", "notAnEmail"]
                    }
                  },
                  "noMembers": {
                    "summary": "No members provided",
                    "value": {
                      "message": "Group name and non-empty array of member emails are required"
                    }
                  },
                  "invalidUsers": {
                    "summary": "Identifiers do not belong to valid users",
                    "value": {
                      "message": "Some email addresses do not belong to valid users",
                      "invalidEmails": ["user.name@company.com"]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Group not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "An unexpected error occurred while adding members to the group"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Members from a Specific Group",
        "description": "This endpoint removes specified members from an existing group using either their email addresses or user IDs. This operation allows you to manage group memberships by explicitly removing users from a group, effectively revoking their access to resources associated with that group.\n### Use Cases:\n- **Revoke Access to Resources**: Remove users from a group to revoke their access to pipelines, tools, or dashboards that rely on group-based permissions.\n- **Enforce Security Policies**: Remove users who no longer require access to certain sensitive or restricted areas of the platform.\n- **Streamline User Offboarding**: As part of a user offboarding process, remove departing employees or contractors from all relevant groups.\n- **Respond to Role Changes**: Update group memberships to reflect changes in user responsibilities, such as transitioning from an active contributor to a read-only observer.\n- **Clean Up Group Memberships**: Remove inactive or outdated user accounts from groups to ensure only relevant users retain access.\n\n***\n### Required Access:\n- **API Scope**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n### Process Details:\n- **Group Validation**: Validates the `groupName` to ensure it meets naming rules.\n- **Group Existence Check**: Verifies that the group exists.\n- **Member Validation**:\n   - Confirms that the `members` array is provided and properly formatted.\n   - Ensures all identifiers are either valid email addresses or unique database identifiers.\n   - Checks that identifiers are not mixed types (all emails or all user IDs).\n   - Removes duplicate identifiers.\n- **User Existence Verification**: Checks that all provided identifiers correspond to valid users.\n- **Group Membership Update**:\n   - Retrieves current members of the group.\n   - Removes specified members from the group.\n   - Members not in the group are skipped.\n- **Response Generation**: Returns a success message with the list of members that were removed.\n\n***\n\n> ### **Important Notes!**\n> - **Case Sensitivity**: The `groupName` is case-sensitive and must match exactly.\n> - **Identifier Type Consistency**: Provide either all email addresses or all user IDs, not a mix of both.\n> - **Valid Formats**: Identifiers must follow these rules:\n>   - **Email Addresses**: Must be in a valid email format.\n>   - **User IDs**: Must be valid valid unique database IDs.\n> - **Duplicate Handling**: Duplicate identifiers in the request are automatically removed.\n> - **Skipped Members**: Members not in the group are skipped without causing an error.\n> - **Atomic Operation**: If any validation fails, no changes are made to the group.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["Group Management"],
        "parameters": [
          {
            "in": "path",
            "name": "groupName",
            "required": true,
            "schema": { "type": "string" },
            "description": "The name of the group to remove members from (case-sensitive)",
            "example": "developers-team"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "email",
                      "description": "Email address of a user"
                    },
                    {
                      "type": "string",
                      "format": "databaseId",
                      "description": "Unique database ID of a user"
                    }
                  ]
                },
                "description": "List of identifiers (either all email addresses or all userIds) of members to remove",
                "minItems": 1
              },
              "examples": {
                "removeWithEmails": {
                  "summary": "Remove members using email addresses",
                  "value": ["user.name@company.com", "another.user@company.com"]
                },
                "removeWithUserIds": {
                  "summary": "Remove members using user IDs",
                  "value": [
                    "507f1f77bcf86cd799439011",
                    "507f1f77bcf86cd799439012"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Members removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Group membership update completed successfully"
                    },
                    "result": {
                      "type": "string",
                      "description": "Detailed result of the operation",
                      "example": "Members removed successfully"
                    },
                    "removedMembers": {
                      "type": "array",
                      "description": "List of identifiers that were successfully removed",
                      "items": { "type": "string" },
                      "example": [
                        "user.name@company.com",
                        "another.user@company.com"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid input)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "invalidItems": {
                      "type": "array",
                      "description": "List of invalid identifiers",
                      "items": { "type": "string" }
                    }
                  }
                },
                "examples": {
                  "invalidIdentifiers": {
                    "summary": "Invalid identifiers provided",
                    "value": {
                      "message": "Invalid identifiers provided - must be valid email addresses or Opsera User IDs",
                      "invalidItems": [
                        "invalid.email",
                        "notAnEmail",
                        "invalidId"
                      ]
                    }
                  },
                  "mixedTypes": {
                    "summary": "Mixed identifier types detected",
                    "value": {
                      "message": "Mixed identifier types detected - must use either all email addresses or all user IDs"
                    }
                  },
                  "invalidUsers": {
                    "summary": "Identifiers do not belong to valid users",
                    "value": {
                      "message": "Some identifiers do not belong to valid users",
                      "invalidUsers": ["507f1f77bcf86cd799439011"]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Group not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "An unexpected error occurred while removing members from the group"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/usermanagement/user": {
      "post": {
        "summary": "Create a New User",
        "description": "Use this endpoint to create a new user within your organization on the Opsera platform.\nThe new user will be set up within the organization context and can be assigned specific roles and groups to define their permissions. For more details on required user permissions, refer to the [Opsera User Management API documentation](https://docs.opsera.io/api-platform-and-integration/user-management-api#required-user-permissions).\n\n### Use Cases\n- **Onboard new employees**: Add new users to the platform, assigning them the appropriate roles and groups.\n- **Extend organization membership**: Add users across departments or functional roles with customized access.\n\n***\n\n### Required Access\n- **API Scope**: `api`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n\n***\n\n### Process Details\nUpon calling this endpoint:\n1. The system validates the request body, including required fields and specific data formatting (e.g., email and siteRole).\n2. It checks if the user already exists in both LDAP and SSO systems.\n3. If not, the user is created in both systems and assigned to groups if provided.\n4. The newly created user receives an email invitation for registration completion.\n\n***\n\n> ### **Important Notes!**\n> - **Site Role Validation**: The `siteRole` field must be one of the specified valid roles (e.g., Administrators, PowerUsers).\n> - **Email Format**: Email addresses must follow a standard format and cannot already be registered in the organization.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["User Management"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "emailAddress",
                  "firstName",
                  "lastName",
                  "siteRole"
                ],
                "properties": {
                  "emailAddress": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address. Must be a valid email format and will be used for authentication and communication.",
                    "example": "jd@opsera.io"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "User's first name or given name. Used for identification and display purposes throughout the system.",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "User's last name.",
                    "example": "Doe"
                  },
                  "preferredName": {
                    "type": "string",
                    "description": "User's preferred name or nickname. This is an optional field that can be used instead of firstName in display contexts.",
                    "example": "Johnny"
                  },
                  "title": {
                    "type": "string",
                    "description": "User's job title or position within the organization. Helps in understanding the user's role and responsibilities.",
                    "example": "Senior Software Engineer"
                  },
                  "site": {
                    "type": "string",
                    "description": "User's physical location or office site. Useful for organizational and administrative purposes.",
                    "example": "Headquarters"
                  },
                  "division": {
                    "type": "string",
                    "description": "User's organizational division or department. Helps in categorizing users within the organizational structure.",
                    "example": "Engineering"
                  },
                  "siteRole": {
                    "type": "string",
                    "description": "Specifies the user's access level in the system. Must be one of:\n- `Administrators`: Full system access and control.\n- `PowerUsers`: Extended privileges for managing resources.\n- `Users`: Standard access to system features.\n- `Auditors`: Read-only access for audit purposes.\n- `SecurityManagers`: Special security access for security-related functions.\n",
                    "enum": [
                      "Administrators",
                      "PowerUsers",
                      "Users",
                      "Auditors",
                      "SecurityManagers"
                    ],
                    "example": "Users"
                  },
                  "groups": {
                    "type": "array",
                    "description": "List of group IDs the user should be added to. Groups provide additional access control and organization capabilities.",
                    "items": { "type": "string" },
                    "example": [
                      "507f1f77bcf86cd799439011",
                      "507f1f77bcf86cd799439012"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User creation complete"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "description": "Opsera User ID. Used as a primary key for user-related operations.",
                          "example": "507f1f77bcf86cd799439011"
                        },
                        "applications": {
                          "type": "array",
                          "description": "List of application IDs that the user has access to. Each ID represents a specific application in the system.",
                          "items": { "type": "string" },
                          "example": [
                            "507f1f77bcf86cd799439011",
                            "507f1f77bcf86cd799439012"
                          ]
                        },
                        "tools": {
                          "type": "array",
                          "description": "List of tool IDs that the user has access to. Tools represent different functionalities or integrations available to the user.",
                          "items": { "type": "string" },
                          "example": [
                            "507f1f77bcf86cd799439013",
                            "507f1f77bcf86cd799439014"
                          ]
                        },
                        "firstName": {
                          "type": "string",
                          "description": "User's first name or given name, used for identification and display purposes.",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "description": "User's last name or family name, used for identification and display purposes.",
                          "example": "Doe"
                        },
                        "email": {
                          "type": "string",
                          "description": "User's email address, used for authentication and communication. Must be unique within the system.",
                          "example": "jd@opsera.io"
                        },
                        "ssoSystem": {
                          "type": "string",
                          "description": "The Single Sign-On (SSO) system used for user authentication. Indicates how the user authenticates with the system.",
                          "example": "exampleSso"
                        },
                        "organizationName": {
                          "type": "string",
                          "description": "Name of the organization the user belongs to. Used for organizational context and access control."
                        },
                        "division": {
                          "type": "string",
                          "description": "User's organizational division or department. Helps in categorizing users within the organizational structure.",
                          "example": "Engineering"
                        },
                        "domain": {
                          "type": "string",
                          "description": "The domain associated with the user's organization. Used for authentication and organization-specific features.",
                          "example": "example.com"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp indicating when the user account was created. Stored in ISO 8601 format.",
                          "example": "2023-11-01T12:00:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp indicating when the user account was last modified. Stored in ISO 8601 format.",
                          "example": "2023-11-02T12:00:00.000Z"
                        },
                        "groups": {
                          "type": "array",
                          "description": "List of group IDs that the user belongs to. Groups provide additional access control and organization capabilities.",
                          "items": { "type": "string" },
                          "example": []
                        },
                        "active": {
                          "type": "boolean",
                          "description": "Indicates whether the user account is currently active. Inactive accounts cannot access the system.",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid site role. Valid site roles are: Administrators, PowerUsers, Users, Auditors, SecurityManagers"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User lacks permission to create users"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to create user"
                    },
                    "error": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Search for a User by Email",
        "description": "This endpoint searches for a user using an email address pattern. It supports exact matches and wildcard searches.\nFor wildcard searches, use the `*` character (e.g., `email=*@domain.com` or `email=john*@domain.com`).\nThe search is case-insensitive and can be used to find users based on partial or complete email addresses.\n\n### Use Cases\n- **Identify Specific Users**: Retrieve user details based on an exact email match.\n- **Wildcard Search**: Find users across an organization or group by using flexible search patterns.\n- **User Audit and Reporting**: Verify user existence and retrieve associated metadata for system audits or reports.\n\n***\n\n### Required Access\n- **API Scope**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n\n### Process Details\n- **Search Query Validation**: Validates the search query format to ensure it uses the correct email pattern.\n- **User Lookup**:\n   - Retrieves all active users in the system.\n   - Filters users based on the provided search query.\n   - Supports both exact match and wildcard searches.\n- **Response Handling**:\n   - If a single user matches the query, returns the user data.\n   - If multiple users match, prompts the client to refine the search.\n   - If no users match, returns a 404 response.\n\n***\n\n> ### **Important Notes!**\n> - **Search Format**: Use the `email=` prefix in the query (e.g., `email=jd@opsera.io`).\n> - **Wildcard Searches**: Use the `*` character to match multiple users (e.g., `email=*@opsera.io`).\n> - **Case Insensitivity**: The search query is not case-sensitive.\n> - **Multiple Matches**: If more than one user matches the query, you must refine the search to a single user.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "tags": ["User Management"],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "required": true,
            "schema": { "type": "string" },
            "description": "Search query in the format `email=value`. Supports exact email matches and wildcard patterns.\n- Examples:\n  - `email=jd@opsera.io` (exact match)\n  - `email=*@opsera.io` (all users in the domain)\n  - `email=john*@opsera.io` (all users starting with \"john\")\n  - `email=*engineer*@opsera.io` (all users with \"engineer\" in the email)\n",
            "example": "email=user.name@opsera.io"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Opsera User ID. Used as a primary key for user-related operations.",
                      "example": "5e1cbf251c26d68f7ce6361e"
                    },
                    "applications": {
                      "type": "array",
                      "description": "List of application IDs that the user has access to. Each ID represents a specific application in the system.",
                      "items": { "type": "string" },
                      "example": [
                        "60633793310cdb13fa85afa5",
                        "608304e85d1e526c80bb9749"
                      ]
                    },
                    "tools": {
                      "type": "array",
                      "description": "List of tool IDs that the user has access to. Tools represent different functionalities or integrations available to the user.",
                      "items": { "type": "string" },
                      "example": [
                        "61eafd724868abd5193bfd4c",
                        "61f70a5b61b870001112d37c"
                      ]
                    },
                    "firstName": {
                      "type": "string",
                      "description": "User's first name or given name, used for identification and display purposes.",
                      "example": "John"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "User's last name or family name, used for identification and display purposes.",
                      "example": "Doe"
                    },
                    "email": {
                      "type": "string",
                      "description": "User's email address, used for authentication and communication. Must be unique within the system.",
                      "example": "jd@opsera.io"
                    },
                    "ssoSystem": {
                      "type": "string",
                      "description": "The Single Sign-On (SSO) system used for user authentication. Indicates how the user authenticates with the system.",
                      "example": "okta"
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "Name of the organization the user belongs to. Used for organizational context and access control.",
                      "example": "Example Inc."
                    },
                    "division": {
                      "type": "string",
                      "description": "User's organizational division or department. Helps in categorizing users within the organizational structure.",
                      "example": "Engineering"
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain associated with the user's organization. Used for authentication and organization-specific features.",
                      "example": "Example Domain"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp indicating when the user account was created. Stored in ISO 8601 format.",
                      "example": "2020-01-13T19:04:05.632Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp indicating when the user account was last modified. Stored in ISO 8601 format.",
                      "example": "2024-10-28T10:08:20.705Z"
                    },
                    "groups": {
                      "type": "array",
                      "description": "List of group IDs that the user belongs to. Groups provide additional access control and organization capabilities.",
                      "items": { "type": "string" },
                      "example": []
                    },
                    "active": {
                      "type": "boolean",
                      "description": "Indicates whether the user account is currently active. Inactive accounts cannot access the system.",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid search query or multiple users found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message explaining why the search failed.",
                      "example": "Multiple users found. Please refine your search."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User doesn't have permission to search users"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "No users were found matching the search criteria.",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for troubleshooting.",
                      "example": "Failed to retrieve user"
                    },
                    "error": {
                      "type": "string",
                      "description": "Technical error details if available."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/usermanagement/user/{userId}": {
      "delete": {
        "summary": "Deactivate a User in the System",
        "description": "This endpoint deactivates a user account by setting the user's active status to `false`, rather than permanently deleting the record. This approach ensures the user's data, history, and associations are preserved for auditing purposes or potential future reactivation. This is ideal for managing inactive users while maintaining data integrity and historical traceability. For more details on required user permissions, refer to the [Opsera User Management API documentation](https://docs.opsera.io/api-platform-and-integration/user-management-api#deactivate-user).\n\n### Use Cases\n- **User Offboarding**: Temporarily deactivate accounts for employees or contractors who leave the organization but may return later.\n- **Access Control Management**: Suspend users who no longer require access to the system without erasing historical activity.\n- **Data Retention**: Retain user records for auditing or compliance purposes while preventing further system access.\n\n***\n\n### Required Access\n- **API Scopes**: `api`\n- **Site Roles**: `Opsera Administrator`, `Administrator`\n\n***\n\n### Process Details\n- **Parameter Validation**:\n  - Ensures that a valid `userId` is provided in the request.\n  - Rejects the request if the `userId` is missing or invalid.\n- **Deactivation Process**:\n  - Calls the backend service to set the `active` status of the user to `false`.\n- **Response Handling**:\n  - Returns a success message if the deactivation is completed successfully.\n  - Responds with appropriate error messages for invalid input or unexpected issues.\n\n***\n\n> ### **Important Notes!**\n> - **Non-Destructive Operation**: This is a soft delete. The user record remains in the system and can be reactivated later.\n> - **Required Parameter**: The `userId` must be provided and must uniquely identify the user.\n",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api"],
          "siteRoles": ["Opsera Administrator", "Administrator"]
        },
        "tags": ["User Management"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" },
            "description": "The Opsera User ID for the user to deactivate.",
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "200": {
            "description": "User deactivated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message indicating the user was deactivated.",
                      "example": "User deactivation completed: true"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid user ID or deactivation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message explaining the reason for failure.",
                      "example": "Failed to deactivate user"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User doesn't have permission to deactivate users."
          },
          "422": {
            "description": "Unprocessable Entity - Missing required parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Did not include the required Request Parameters."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for troubleshooting.",
                      "example": "An error occurred while deactivating the user"
                    },
                    "error": {
                      "type": "string",
                      "description": "Technical error details if available."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a Specific User by ID",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "description": "This endpoint fetches detailed information about a specific user by their Opsera User ID. The response includes essential user attributes, organizational details, and system access information. This endpoint is commonly used to manage user records or display user details in administrative interfaces. For more details on required user permissions, refer to the [Opsera User Management API documentation](https://docs.opsera.io/api-platform-and-integration/user-management-api#retrieve-user-details-using-user-id).\n### Use Cases\n- **Account Management**: Retrieve comprehensive user details for administrative tasks such as auditing, reporting, or updates.\n- **Permission Verification**: Validate user access to tools, applications, or organizational divisions.\n- **UI/UX Integration**: Provide detailed user profiles in dashboards or other user-facing interfaces.\n- **Compliance and Auditing**: Ensure organizational compliance by fetching user-related information.\n\n***\n### Required Access\n- **API Scopes**: `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n### Process Details\n- **Parameter Validation**:\n  - Validates that the `userId` parameter is provided and is in the correct format.\n  - Rejects invalid or missing `userId` parameters.\n- **User Data Retrieval**:\n  - Fetches user details using the `userId`.\n  - Sanitizes sensitive properties to ensure data security.\n- **Response Handling**:\n  - Returns the sanitized user details if found.\n  - Provides appropriate error messages for missing or invalid users.\n\n***\n\n> ### **Important Notes!**\n> - **Required Parameter**: The `userId` must be included in the request and uniquely identify the user.\n> - **Security Consideration**: Sensitive user attributes are omitted to ensure data security.\n",
        "tags": ["User Management"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "string" },
            "description": "The unique database ID of the user to retrieve. This ID uniquely identifies the user in the system.",
            "example": "6449c988b5760b001e46c27f"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Opsera User ID. Used as a primary key for user-related operations.",
                      "example": "507f1f77bcf86cd799439011"
                    },
                    "applications": {
                      "type": "array",
                      "description": "List of application IDs that the user has access to. Each ID represents a specific application in the system.",
                      "items": { "type": "string" },
                      "example": [
                        "507f1f77bcf86cd799439011",
                        "507f1f77bcf86cd799439012"
                      ]
                    },
                    "tools": {
                      "type": "array",
                      "description": "List of tool IDs that the user has access to. Tools represent different functionalities or integrations available to the user.",
                      "items": { "type": "string" },
                      "example": [
                        "507f1f77bcf86cd799439013",
                        "507f1f77bcf86cd799439014"
                      ]
                    },
                    "firstName": {
                      "type": "string",
                      "description": "User's first name or given name, used for identification and display purposes.",
                      "example": "Jane"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "User's last name or family name, used for identification and display purposes.",
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "description": "User's email address, used for authentication and communication. Must be unique within the system.",
                      "example": "jane.smith@company.example.com"
                    },
                    "ssoSystem": {
                      "type": "string",
                      "description": "The Single Sign-On (SSO) system used for user authentication. Indicates how the user authenticates with the system.",
                      "example": "exampleSso"
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "Name of the organization the user belongs to. Used for organizational context and access control.",
                      "example": "Example Corporation"
                    },
                    "division": {
                      "type": "string",
                      "description": "User's organizational division or department. Helps in categorizing users within the organizational structure.",
                      "example": "Engineering"
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain associated with the user's organization. Used for authentication and organization-specific features.",
                      "example": "company.example.com"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp indicating when the user account was created. Stored in ISO 8601 format.",
                      "example": "2023-11-01T12:00:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp indicating when the user account was last modified. Stored in ISO 8601 format.",
                      "example": "2023-11-02T12:00:00.000Z"
                    },
                    "groups": {
                      "type": "array",
                      "description": "List of group IDs that the user belongs to. Groups provide additional access control and organization capabilities.",
                      "items": { "type": "string" },
                      "example": []
                    },
                    "active": {
                      "type": "boolean",
                      "description": "Indicates whether the user account is currently active. Inactive accounts cannot access the system.",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message explaining why the request was invalid",
                      "example": "A valid User id is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User doesn't have permission to view user details"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the user could not be found",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for troubleshooting",
                      "example": "Failed to retrieve user"
                    },
                    "error": {
                      "type": "string",
                      "description": "Technical error details if available"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/usermanagement/users": {
      "get": {
        "summary": "Get Active Users (search by email or IDs)",
        "security": [{ "bearerAuth": [] }],
        "x-roles-required": {
          "scopes": ["api", "api-readonly"],
          "siteRoles": ["Opsera Administrator", "Administrator", "Power User"]
        },
        "description": "This endpoint returns only active users matching the search criteria. Supports both email pattern matching and ID-based lookup. It is useful for retrieving multiple users at once, either by searching their email addresses\nor by providing a list of specific user IDs. For more details, refer to the [Opsera API Documentation](https://docs.opsera.io/api-platform-and-integration/user-management-api#retrieve-active-users).\n\n### Use Cases\n- Retrieve active users by email pattern (e.g., all users from a specific domain).\n- Fetch specific users by their unique IDs.\n- Integrate with external systems that require user information based on email or ID.\n\n***\n### Required Access\n- **API Scope:** `api`, `api-readonly`\n- **Site Roles**: `Opsera Administrator`, `Administrator`, `Power User`\n\n***\n### Process Details\n- **Email Search:**\n  - Supports wildcard patterns using the `*` character.\n  - Case-insensitive matching.\n  - **Example searches**:\n    - `email=*@company.com` (all users with `company.com` email addresses).\n    - `email=user*` (all users whose email starts with `user`).\n    - `email=*name*@company.com` (all users with `name` in their email at `company.com`).\n- **ID-based Lookup:**\n  - Provide a comma-separated list of user IDs.\n  - Only returns active users with the specified IDs.\n  - Maintains the order of users as per input IDs.\n\n***\n> ### **Important Notes!**\n> - If both `search` and `id` parameters are provided, the `id` parameter takes precedence.\n> - The endpoint returns only active users; inactive users are excluded.\n> - Input parameters are sanitized to prevent injection attacks.\n> - Sensitive fields are omitted from the response for security reasons.\n",
        "tags": ["User Management"],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search query for user emails. Supports wildcard patterns using the `*` character.\n- **Examples**:\n   - `email=*@company.com` (all users with company.com addresses)\n   - `email=user*` (all users whose email starts with 'user')\n   - `email=*name*@company.com` (all users with 'name' in their email at company.com)\n"
          },
          {
            "in": "query",
            "name": "id",
            "schema": { "type": "string" },
            "description": "Comma-separated list of user IDs to retrieve specific users.\n- **Example**: `id=507f1f77bcf86cd799439011,507f1f77bcf86cd799439012,507f1f77bcf86cd799439013`\n- **Note**: Only active users with the specified IDs will be returned.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved active users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of user objects matching the search criteria",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "Unique identifier for the user in database format. Used as a primary key for user-related operations.",
                        "example": "507f1f77bcf86cd799439011"
                      },
                      "applications": {
                        "type": "array",
                        "description": "List of application IDs that the user has access to. Each ID represents a specific application in the system.",
                        "items": { "type": "string" },
                        "example": [
                          "60633793310cdb13fa85afa5",
                          "608304e85d1e526c80bb9749"
                        ]
                      },
                      "tools": {
                        "type": "array",
                        "description": "List of tool IDs that the user has access to.",
                        "items": { "type": "string" },
                        "example": [
                          "61eafd724868abd5193bfd4c",
                          "61f70a5b61b870001112d37c"
                        ]
                      },
                      "firstName": {
                        "type": "string",
                        "description": "User's first name or given name, used for identification and display purposes.",
                        "example": "John"
                      },
                      "lastName": {
                        "type": "string",
                        "description": "User's last name or family name, used for identification and display purposes.",
                        "example": "Doe"
                      },
                      "email": {
                        "type": "string",
                        "description": "User's email address, used for authentication and communication. Must be unique within the system.",
                        "example": "user.name@company.com"
                      },
                      "ssoSystem": {
                        "type": "string",
                        "description": "The Single Sign-On (SSO) system used for user authentication. Indicates how the user authenticates with the system.",
                        "example": "acmeSso"
                      },
                      "organizationName": {
                        "type": "string",
                        "description": "Name of the organization the user belongs to. Used for organizational context and access control.",
                        "example": "Company Name"
                      },
                      "division": {
                        "type": "string",
                        "description": "User's organizational division or department. Helps in categorizing users within the organizational structure.",
                        "example": "Engineering"
                      },
                      "domain": {
                        "type": "string",
                        "description": "The domain associated with the user's organization. Used for authentication and organization-specific features.",
                        "example": "company.com"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp indicating when the user account was created.",
                        "example": "2023-11-01T12:00:00.000Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp indicating when the user account was last modified. Stored in ISO 8601 format.",
                        "example": "2023-11-02T12:00:00.000Z"
                      },
                      "groups": {
                        "type": "array",
                        "description": "List of group IDs that the user belongs to. Groups provide additional access control and organization capabilities.",
                        "items": { "type": "string" },
                        "example": []
                      },
                      "active": {
                        "type": "boolean",
                        "description": "Indicates whether the user account is currently active. Inactive accounts cannot access the system.",
                        "example": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid search query or ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message explaining why the request was invalid.",
                      "example": "Invalid search query format"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for troubleshooting.",
                      "example": "An unexpected error occurred while retrieving users"
                    },
                    "error": {
                      "type": "string",
                      "description": "Technical error details if available."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
